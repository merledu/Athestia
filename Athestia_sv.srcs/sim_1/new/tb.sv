`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 13.11.2024 20:50:43
// Design Name: 
// Module Name: tb
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


// ******************************************************************************************//
//module tb;
//    import Dilithium_pkg::*;
//    initial begin
//        $display("q = %d", q);
//        $display("zeta = %d", zeta);
//        $display("d = %d", d);
//        $display("tau = %d", tau);
//        $display("lambda = %d", lambda);
//        $display("gamma1 = %d", gamma1);
//        $display("gamma2 = %d", gamma2);
//        $display("k = %d", k);
//        $display("l = %d", l);
//        $display("eta = %d", eta);
//        $display("beta = %d", beta);
//        $display("omega = %d", omega);
//    end
//endmodule




// ******************************************************************************************//
//module tb;
//    logic unsigned [22:0] t;

//    logic unsigned [9:0]  t1;
//    logic signed [12:0] t0;

//    Power2round uut (
//        .t(t),
//        .t1(t1),
//        .t0(t0)
//    );

//    initial begin
//        $display("Time = %0t | t = %0d | t1 = %0d | t0 = %0d", $time, t, t1, t0);
//        t = 23'd7011276;
//        #10;
        
//        $finish;
//    end
//endmodule




// ******************************************************************************************//
//module tb;
//    parameter int ALPHA = 3;

//    logic [ALPHA-1:0] x;
//    logic [ALPHA-1:0] y;

//    IntegerToBits #(.ALPHA(ALPHA)) uut (
//        .x(x),
//        .y(y)
//    );

//    initial begin
//        x = 4;  // Binary representation: 0000001111111111 in 16 bits
//        #10;
//        // Loop through each bit of y and display as an array of 0s and 1s
//        for (int i = 0; i < ALPHA; i = i + 1) begin
//            $write("%0d", y[i]);
//            if (i < ALPHA - 1)
//                $write(", ");
//        end
//        $finish;
//    end
//endmodule




// ******************************************************************************************//
//module tb;
//    parameter int Y = 12;                         // Length of input bit array
//    localparam int Z_WIDTH = ((Y + 7) / 8) * 8;  // Output bit array width

//    logic [Y-1:0] y;                              // Input bit array
//    logic [Z_WIDTH-1:0] z;                        // Output byte array

//    BitsToBytes #(
//        .Y(Y)
//    ) uut (
//        .y(y),
//        .z(z)
//    );

//    initial begin
//        y = 12'b101101011001;  // Input bit string (little-endian representation)
//        #10;
//        $display("Input y (binary): %b", y);
//        $display("Output z (hexadecimal): %0h", z);
        
//        for (int i = 0; i < Z_WIDTH / 8; i++) begin  // Print individual bytes of z for verification
//            $display("Byte %0d: %0d (decimal)", i, z[i * 8 +: 8]);
//        end
//        $finish;
//    end
//endmodule




// ******************************************************************************************//
//module tb;
//    parameter int MAX_WIDTH = 3; // Maximum width of x
    
//    logic [MAX_WIDTH-1:0] x;      // Input integer
//    logic [$clog2(MAX_WIDTH):0] bit_length; // Output bit length

//    Bitlen #(
//        .MAX_WIDTH(MAX_WIDTH)
//    ) uut (
//        .x(x),
//        .bit_length(bit_length)
//    );

//    initial begin
//        x = 4; 
//        #10;
//        $display("Input x: %d, Bit length: %d", x, bit_length); // Expected: 6
//        $finish;
//    end
//endmodule




// ******************************************************************************************//
//module tb;
//    parameter int W_WIDTH = 10;    // Width of the coefficients in w
////    parameter int B_WIDTH = 10;    // Width of the integer b

//    logic [W_WIDTH-1:0] w [255:0];  // Input array w of 256 elements
////    logic [B_WIDTH-1:0] b;          // Input integer b
//    logic [(256 * W_WIDTH) - 1:0] z;  // Output bitstream array

//    SimpleBitPack #(
//        .W_WIDTH(W_WIDTH)
////        .B_WIDTH(B_WIDTH)
//    ) uut (
//        .w(w),
////        .b(b),
//        .z(z)
//    );

//    initial begin
//        w[0] = 787;   w[1] = 690;   w[2] = 216;   w[3] = 813;
//        w[4] = 845;   w[5] = 504;   w[6] = 941;   w[7] = 243;
//        w[8] = 880;   w[9] = 649;   w[10] = 979;  w[11] = 123;
//        w[12] = 320;  w[13] = 1018; w[14] = 881;  w[15] = 167;
//        w[16] = 163;  w[17] = 919; w[18] = 22;   w[19] = 97;
//        w[20] = 522;  w[21] = 457; w[22] = 526;  w[23] = 144;
//        w[24] = 707;  w[25] = 941; w[26] = 891;  w[27] = 679;
//        w[28] = 91;   w[29] = 682; w[30] = 26;   w[31] = 266;
//        w[32] = 132;  w[33] = 534; w[34] = 366;  w[35] = 353;
//        w[36] = 281;  w[37] = 655; w[38] = 619;  w[39] = 898;
//        w[40] = 23;   w[41] = 628; w[42] = 642;  w[43] = 309;
//        w[44] = 595;  w[45] = 997; w[46] = 851;  w[47] = 932;
//        w[48] = 439;  w[49] = 308; w[50] = 568;  w[51] = 428;
//        w[52] = 766;  w[53] = 684; w[54] = 932;  w[55] = 720;
//        w[56] = 641;  w[57] = 853; w[58] = 908;  w[59] = 514;
//        w[60] = 713;  w[61] = 322; w[62] = 348;  w[63] = 808;
//        w[64] = 670;  w[65] = 350; w[66] = 149;  w[67] = 529;
//        w[68] = 800;  w[69] = 319; w[70] = 494;  w[71] = 665;
//        w[72] = 1012; w[73] = 122; w[74] = 647;  w[75] = 830;
//        w[76] = 373;  w[77] = 358; w[78] = 697;  w[79] = 678;
//        w[80] = 565;  w[81] = 827; w[82] = 985;  w[83] = 277;
//        w[84] = 332;  w[85] = 555; w[86] = 446;  w[87] = 241;
//        w[88] = 361;  w[89] = 915; w[90] = 456;  w[91] = 460;
//        w[92] = 919;  w[93] = 298; w[94] = 867;  w[95] = 965;
//        w[96] = 829;  w[97] = 630; w[98] = 523;  w[99] = 532;
//        w[100] = 700; w[101] = 89;  w[102] = 639; w[103] = 947;
//        w[104] = 645; w[105] = 604; w[106] = 575; w[107] = 201;
//        w[108] = 173; w[109] = 206; w[110] = 418; w[111] = 988;
//        w[112] = 105; w[113] = 436; w[114] = 510; w[115] = 120;
//        w[116] = 443; w[117] = 172; w[118] = 1014; w[119] = 37;
//        w[120] = 676; w[121] = 829; w[122] = 346; w[123] = 237;
//        w[124] = 248; w[125] = 99;  w[126] = 970; w[127] = 587;
//        w[128] = 741; w[129] = 295; w[130] = 343; w[131] = 854;
//        w[132] = 58;  w[133] = 834; w[134] = 435; w[135] = 324;
//        w[136] = 219; w[137] = 617; w[138] = 322; w[139] = 57;
//        w[140] = 806; w[141] = 936; w[142] = 53;  w[143] = 448;
//        w[144] = 617; w[145] = 463; w[146] = 842; w[147] = 203;
//        w[148] = 573; w[149] = 363; w[150] = 143; w[151] = 990;
//        w[152] = 660; w[153] = 846; w[154] = 715; w[155] = 209;
//        w[156] = 806; w[157] = 898; w[158] = 205; w[159] = 301;
//        w[160] = 573; w[161] = 846; w[162] = 27;  w[163] = 285;
//        w[164] = 58;  w[165] = 213; w[166] = 949; w[167] = 349;
//        w[168] = 1011; w[169] = 330; w[170] = 407; w[171] = 553;
//        w[172] = 596; w[173] = 395; w[174] = 1017; w[175] = 787;
//        w[176] = 664; w[177] = 406; w[178] = 899; w[179] = 272;
//        w[180] = 908; w[181] = 721; w[182] = 718; w[183] = 637;
//        w[184] = 557; w[185] = 767; w[186] = 790; w[187] = 357;
//        w[188] = 807; w[189] = 702; w[190] = 370; w[191] = 990;
//        w[192] = 231; w[193] = 188; w[194] = 390; w[195] = 588;
//        w[196] = 254; w[197] = 928; w[198] = 226; w[199] = 470;
//        w[200] = 750; w[201] = 445; w[202] = 851; w[203] = 404;
//        w[204] = 61;  w[205] = 874; w[206] = 627; w[207] = 206;
//        w[208] = 997; w[209] = 302; w[210] = 80;  w[211] = 964;
//        w[212] = 318; w[213] = 116; w[214] = 348; w[215] = 838;
//        w[216] = 484; w[217] = 144; w[218] = 809; w[219] = 140;
//        w[220] = 917; w[221] = 298; w[222] = 887; w[223] = 645;
//        w[224] = 798; w[225] = 611; w[226] = 738; w[227] = 844;
//        w[228] = 178; w[229] = 757; w[230] = 772; w[231] = 572;
//        w[232] = 725; w[233] = 565; w[234] = 438; w[235] = 325;
//        w[236] = 815; w[237] = 224; w[238] = 485; w[239] = 75;
//        w[240] = 394; w[241] = 446; w[242] = 291; w[243] = 258;
//        w[244] = 952; w[245] = 237; w[246] = 477; w[247] = 138;
//        w[248] = 80;  w[249] = 410; w[250] = 165; w[251] = 884;
//        w[252] = 155; w[253] = 645; w[254] = 919; w[255] = 83;

////        b = 1023; 

//        #10; // Wait for the processing to complete

//       // Display results before converting to bytes
//        $display("Input w: %p", w);
////        $display("Input b: %d", b);
//        $display("Packed z_bits: %b", uut.z_bits);  // Display the packed z_bits before byte conversion
//        // Display the final packed byte array
//        $display("Output z (hexadecimal): %0h", z);
        
//        $finish;
//    end
//endmodule




// ******************************************************************************************//
//module tb;
//    parameter int WIDTH = 512;  // 128 hex digits = 128 * 4 = 512 bits

//    logic [WIDTH-1:0] in_data;   // Input data (512 bits)
//    logic [WIDTH-1:0] out_data;  // Output data (reversed)

//    // Instantiate the Reverse module
//    Reverse #(
//        .WIDTH(WIDTH)
//    ) uut (
//        .in_data(in_data),
//        .out_data(out_data)
//    );

//    initial begin
//        // Example Hex Input: 128 hex digits = 512 bits
//        in_data = 512'h14f97a149bdd0a566850229dd3b7b8409236f98a12de53832f515b68d6d58f304bd4b2d32e298f1ea17774ab9523329241e4d195c1d13ef10504bbe533a73da83d653536f6ee758e2e80fe931862f0e7f7972afb2759716bfe2d9f6ceb478c4438365a98c4ff962e548a59752bf3577b53543a4741bd3a3d4b4cde0b26346cbd3a94f788f5ae3d32f4a73e6970035ea3260e5429a4db511b3d083ad595749ee592fca18cf83b55acf6a4097f62b1bb1e1fe6d069f71a2338ad3263f97285ece7f166bc8520b9db3df17634ab97731c8e4d693c5be8ad4c457d9cee35a9ab959975cfa871ebf4a65ee4ff208449557a9eca15c50ac980b8cd5681b43a4ab2fe6b2384d1b7e9353f96534d6829d017e0a6ba3d195856e858844281aaa85ba9f7beb6c32420e7260a18416e5ca329f71fe9401efd3a27703cfad7e34dcb4d8acb13;

//        #10;  // Wait for the process to complete

//        // Display the input and reversed output as hexadecimal
//        $display("Input Data (Hex): %0h", in_data);
//        $display("Reversed Data (Hex): %0h", out_data);
        
//        $finish;
//    end
//endmodule




// ******************************************************************************************//
//module tb;
//    reg clk;
//    reg reset;
//    reg [255:0] rho;
//    reg [9:0] t1[7:0][255:0]; // 8 polynomials each with 256 coefficients of 10 bits

//    wire [20735:0] pk;
//    wire valid;

//    PkEncode uut (
//        .clk(clk),
//        .reset(reset),
//        .rho(rho),
//        .t1(t1),
//        .pk(pk),
//        .valid(valid)
//    );
//    // Clock generation
//    always #5 clk = ~clk; // Generate a clock with a period of 10ns
//    // Initialize Inputs and generate test vectors
//    initial begin
//        // Initialize Inputs
//        clk = 0;
//        reset = 1;
////       rho = 256'h6d378ad2e47a0c996e37d52c55cda67bcca6ff8f1d2cd66439a8536bb684e20f;   //python
//        rho = 256'h0fe284b66b358a39646dc21d8fff6acc7ba6dc552cd5736e990c7ae4d28a376d;

//        t1[0] = '{787, 690, 216, 813, 845, 504, 941, 243, 880, 649, 979, 123, 320, 1018, 881, 167, 163, 919, 22, 97, 522, 457, 526, 144, 707, 941, 891, 679, 91, 682, 26, 266, 132, 534, 366, 353, 281, 655, 619, 898, 23, 628, 642, 309, 595, 997, 851, 932, 439, 308, 568, 428, 766, 684, 932, 720, 641, 853, 908, 514, 713, 322, 348, 808, 670, 350, 149, 529, 800, 319, 494, 665, 1012, 122, 647, 830, 373, 358, 697, 678, 565, 827, 985, 277, 332, 555, 446, 241, 361, 915, 456, 460, 919, 298, 867, 965, 829, 630, 523, 532, 700, 89, 639, 947, 645, 604, 575, 201, 173, 206, 418, 988, 105, 436, 510, 120, 443, 172, 1014, 37, 676, 829, 346, 237, 248, 99, 970, 587, 741, 295, 343, 854, 58, 834, 435, 324, 219, 617, 322, 57, 806, 936, 53, 448, 617, 463, 842, 203, 573, 363, 143, 990, 660, 846, 715, 209, 806, 898, 205, 301, 573, 846, 27, 285, 58, 213, 949, 349, 1011, 330, 407, 553, 596, 395, 1017, 787, 664, 406, 899, 272, 908, 721, 718, 637, 557, 767, 790, 357, 807, 702, 370, 990, 231, 188, 390, 588, 254, 928, 226, 470, 750, 445, 851, 404, 61, 874, 627, 206, 997, 302, 80, 964, 318, 116, 348, 838, 484, 144, 809, 140, 917, 298, 887, 645, 798, 611, 738, 844, 178, 757, 772, 572, 725, 565, 438, 325, 815, 224, 485, 75, 394, 446, 291, 258, 952, 237, 477, 138, 80, 410, 165, 884, 155, 645, 919, 83};
//        t1[1] = '{472, 844, 430, 541, 644, 576, 861, 835, 485, 274, 576, 677, 357, 48, 827, 510, 917, 412, 920, 121, 912, 938, 400, 8, 962, 39, 310, 749, 440, 476, 902, 976, 581, 547, 523, 430, 799, 261, 666, 524, 865, 901, 875, 213, 760, 477, 610, 76, 404, 969, 1018, 427, 471, 928, 904, 738, 697, 676, 137, 876, 748, 260, 896, 867, 164, 233, 45, 562, 65, 79, 719, 922, 106, 102, 103, 119, 325, 204, 40, 569, 568, 861, 883, 237, 486, 665, 610, 1012, 5, 65, 893, 219, 746, 456, 251, 487, 707, 534, 731, 496, 642, 422, 320, 384, 779, 831, 747, 191, 264, 426, 676, 344, 869, 741, 278, 312, 587, 760, 829, 845, 733, 646, 489, 674, 692, 138, 374, 1012, 393, 510, 103, 823, 628, 164, 27, 412, 768, 202, 86, 496, 1010, 674, 471, 244, 1015, 418, 865, 819, 195, 279, 287, 61, 123, 483, 430, 126, 194, 955, 330, 82, 699, 522, 144, 461, 981, 760, 443, 800, 500, 383, 645, 918, 321, 872, 789, 807, 279, 132, 350, 6, 585, 253, 197, 289, 642, 377, 61, 614, 1019, 22, 519, 721, 278, 968, 303, 240, 804, 542, 744, 865, 480, 783, 723, 415, 139, 74, 311, 151, 38, 44, 529, 427, 732, 913, 420, 447, 41, 319, 85, 915, 508, 839, 883, 243, 550, 6, 95, 203, 725, 710, 402, 853, 949, 470, 428, 487, 1005, 591, 568, 42, 560, 986, 334, 1021, 206, 498, 238, 59, 115, 699, 441, 747, 866, 216, 520, 837};
//        t1[2] = '{1004, 907, 915, 853, 225, 653, 414, 419, 743, 819, 845, 967, 776, 458, 731, 37, 161, 548, 151, 489, 397, 497, 271, 659, 283, 14, 183, 728, 981, 689, 789, 197, 283, 326, 897, 481, 17, 539, 60, 319, 877, 656, 418, 1002, 375, 839, 432, 524, 514, 52, 538, 917, 1014, 1019, 262, 485, 384, 129, 327, 68, 622, 172, 1004, 901, 330, 233, 217, 24, 138, 589, 873, 778, 637, 330, 355, 607, 715, 892, 186, 240, 855, 410, 488, 900, 614, 610, 389, 450, 499, 639, 887, 261, 470, 559, 615, 794, 735, 573, 424, 465, 598, 178, 785, 886, 861, 281, 984, 614, 560, 696, 108, 817, 498, 227, 994, 901, 829, 493, 80, 576, 617, 929, 138, 670, 748, 400, 311, 421, 87, 19, 27, 675, 981, 750, 526, 246, 906, 391, 153, 83, 559, 832, 419, 789, 694, 495, 830, 330, 802, 278, 363, 10, 143, 886, 592, 852, 16, 304, 277, 724, 282, 301, 184, 123, 870, 421, 320, 555, 308, 586, 204, 701, 27, 1008, 248, 876, 771, 461, 388, 521, 66, 781, 294, 921, 897, 465, 446, 244, 566, 467, 319, 631, 443, 223, 245, 669, 280, 15, 499, 137, 963, 894, 655, 1015, 14, 156, 703, 665, 739, 284, 850, 851, 626, 727, 15, 163, 245, 555, 786, 908, 464, 78, 512, 846, 1004, 403, 650, 164, 223, 964, 423, 40, 320, 1002, 1015, 535, 58, 662, 402, 785, 821, 785, 277, 1018, 434, 25, 837, 178, 965, 475, 633, 383, 170, 551, 576, 778};
//        t1[3] = '{236, 178, 992, 512, 410, 1000, 792, 7, 250, 740, 865, 46, 839, 951, 632, 370, 898, 694, 429, 695, 361, 51, 117, 430, 901, 79, 210, 321, 620, 657, 951, 69, 133, 518, 733, 1001, 25, 61, 265, 642, 939, 703, 420, 687, 179, 423, 603, 401, 68, 239, 328, 35, 657, 67, 880, 228, 775, 535, 665, 538, 961, 189, 107, 202, 718, 271, 704, 136, 321, 262, 515, 893, 438, 27, 913, 892, 436, 837, 263, 980, 337, 344, 430, 681, 697, 49, 288, 355, 655, 412, 1001, 688, 771, 784, 271, 392, 43, 585, 126, 836, 1008, 272, 69, 392, 698, 394, 729, 745, 790, 397, 622, 275, 711, 575, 540, 963, 940, 106, 292, 509, 52, 379, 987, 861, 303, 67, 852, 296, 750, 178, 887, 434, 865, 303, 1022, 165, 6, 659, 596, 774, 606, 1019, 332, 227, 794, 695, 925, 967, 845, 529, 715, 713, 959, 144, 392, 863, 478, 953, 670, 741, 31, 272, 756, 49, 53, 602, 363, 320, 310, 626, 709, 774, 12, 25, 553, 138, 1, 593, 79, 518, 504, 830, 840, 880, 927, 960, 332, 787, 309, 302, 973, 65, 571, 998, 925, 239, 78, 292, 473, 790, 289, 433, 786, 679, 152, 851, 722, 514, 841, 422, 695, 981, 869, 228, 224, 766, 132, 136, 374, 580, 958, 947, 715, 576, 313, 600, 800, 466, 370, 331, 535, 1018, 436, 492, 236, 678, 16, 149, 633, 124, 805, 949, 21, 194, 996, 927, 154, 56, 24, 300, 523, 927, 64, 508, 247, 113};
//        t1[4] = '{1016, 464, 892, 83, 855, 639, 665, 74, 710, 48, 363, 43, 283, 266, 288, 907, 219, 815, 787, 182, 560, 737, 502, 197, 796, 496, 383, 854, 498, 329, 469, 450, 221, 876, 910, 706, 177, 809, 630, 514, 330, 676, 520, 773, 172, 277, 309, 59, 597, 865, 588, 426, 689, 909, 78, 335, 3, 639, 702, 876, 807, 280, 592, 562, 58, 694, 864, 304, 932, 582, 214, 524, 34, 960, 621, 31, 787, 818, 945, 250, 1009, 576, 113, 168, 768, 302, 420, 1012, 131, 653, 1000, 826, 591, 642, 769, 406, 262, 24, 160, 467, 843, 487, 831, 877, 519, 294, 436, 887, 838, 748, 773, 226, 826, 48, 213, 593, 969, 37, 545, 701, 315, 933, 691, 749, 768, 612, 294, 375, 692, 83, 966, 581, 294, 805, 395, 139, 280, 701, 417, 404, 172, 150, 370, 473, 172, 836, 586, 635, 125, 38, 474, 319, 659, 549, 324, 580, 529, 401, 865, 722, 869, 49, 964, 584, 547, 299, 839, 342, 590, 271, 130, 387, 824, 947, 398, 575, 859, 309, 833, 481, 709, 573, 967, 719, 570, 547, 997, 221, 282, 84, 660, 695, 939, 17, 318, 211, 217, 234, 208, 994, 228, 70, 750, 802, 563, 916, 839, 285, 45, 572, 523, 132, 313, 776, 951, 613, 731, 574, 357, 284, 289, 223, 695, 588, 816, 915, 845, 419, 635, 870, 655, 954, 117, 949, 193, 690, 644, 94, 204, 992, 975, 960, 252, 97, 910, 393, 259, 29, 882, 589, 216, 887, 903, 420, 358, 944};
//        t1[5] = '{900, 216, 867, 247, 426, 608, 227, 855, 597, 374, 516, 365, 336, 858, 411, 851, 326, 796, 446, 872, 1015, 391, 438, 694, 564, 169, 794, 270, 199, 128, 531, 824, 553, 885, 421, 659, 3, 417, 495, 425, 146, 216, 935, 646, 281, 861, 637, 720, 963, 492, 915, 716, 312, 238, 840, 519, 54, 335, 1019, 535, 599, 902, 853, 377, 937, 122, 692, 95, 608, 404, 841, 378, 609, 269, 1, 355, 355, 835, 828, 640, 306, 861, 673, 954, 136, 874, 879, 660, 767, 688, 564, 586, 755, 967, 309, 909, 595, 753, 557, 925, 214, 627, 1016, 791, 276, 87, 690, 530, 604, 72, 865, 761, 334, 604, 457, 483, 788, 57, 788, 598, 443, 491, 523, 394, 458, 703, 857, 416, 635, 709, 752, 346, 52, 844, 261, 80, 235, 175, 758, 808, 949, 97, 98, 449, 296, 756, 620, 896, 36, 812, 460, 335, 541, 753, 87, 183, 153, 130, 983, 291, 373, 836, 16, 946, 502, 542, 641, 645, 1008, 505, 734, 402, 263, 915, 417, 408, 675, 666, 517, 403, 579, 790, 554, 618, 760, 730, 603, 264, 800, 810, 338, 922, 785, 622, 22, 717, 683, 980, 782, 246, 771, 78, 774, 123, 89, 1018, 544, 244, 319, 475, 547, 332, 94, 109, 748, 725, 779, 0, 439, 616, 307, 855, 60, 65, 506, 296, 78, 976, 150, 293, 573, 280, 587, 457, 753, 690, 349, 525, 722, 100, 690, 998, 944, 265, 186, 354, 903, 238, 1006, 670, 114, 440, 793, 920, 728, 485};
//        t1[6] = '{225, 364, 494, 960, 903, 789, 935, 998, 365, 156, 242, 11, 961, 56, 255, 349, 903, 0, 447, 65, 1012, 66, 803, 966, 360, 210, 605, 691, 635, 204, 290, 638, 690, 266, 228, 656, 4, 358, 448, 285, 264, 611, 61, 536, 27, 533, 357, 483, 593, 713, 297, 204, 963, 431, 390, 1022, 144, 735, 269, 523, 244, 493, 783, 61, 191, 969, 784, 438, 147, 306, 160, 87, 459, 174, 61, 122, 288, 611, 896, 264, 362, 518, 472, 178, 498, 228, 846, 419, 367, 883, 967, 1013, 510, 215, 396, 741, 632, 10, 603, 61, 478, 190, 562, 282, 900, 890, 261, 324, 1008, 369, 640, 82, 958, 611, 151, 690, 991, 899, 648, 857, 131, 454, 462, 6, 867, 708, 667, 771, 427, 505, 780, 772, 202, 504, 799, 607, 38, 677, 393, 160, 308, 923, 769, 610, 867, 594, 156, 566, 209, 433, 875, 167, 857, 757, 587, 610, 277, 368, 847, 929, 435, 100, 440, 53, 171, 150, 757, 856, 617, 450, 913, 295, 481, 115, 1, 88, 692, 752, 1, 134, 360, 830, 117, 705, 849, 70, 900, 628, 943, 967, 535, 788, 835, 419, 877, 192, 825, 875, 350, 954, 357, 893, 902, 858, 482, 293, 473, 996, 244, 76, 476, 788, 410, 176, 514, 599, 880, 378, 126, 205, 557, 873, 341, 821, 963, 872, 208, 739, 531, 35, 774, 487, 376, 509, 232, 322, 478, 12, 462, 368, 702, 668, 499, 335, 1013, 273, 427, 837, 748, 941, 215, 58, 630, 713, 552, 722};
//        t1[7] = '{519, 768, 932, 123, 632, 735, 685, 302, 842, 484, 610, 1011, 249, 826, 61, 465, 457, 320, 507, 278, 866, 167, 211, 738, 311, 55, 382, 126, 222, 328, 110, 301, 1017, 751, 694, 880, 431, 384, 154, 485, 912, 1016, 846, 244, 557, 453, 700, 980, 467, 950, 580, 148, 905, 647, 729, 760, 548, 527, 829, 245, 659, 99, 791, 293, 139, 796, 914, 888, 385, 401, 334, 475, 646, 891, 118, 218, 861, 339, 154, 887, 379, 27, 439, 208, 949, 28, 628, 943, 745, 104, 889, 234, 806, 343, 165, 751, 266, 827, 354, 748, 54, 304, 225, 797, 556, 382, 486, 1012, 1007, 524, 782, 498, 206, 172, 79, 862, 553, 846, 340, 911, 486, 801, 452, 650, 718, 429, 532, 305, 624, 662, 556, 88, 813, 787, 505, 925, 474, 122, 248, 662, 721, 709, 741, 878, 513, 941, 527, 11, 616, 383, 471, 680, 692, 647, 756, 440, 665, 414, 431, 833, 782, 578, 59, 577, 509, 678, 586, 680, 584, 764, 475, 2, 376, 204, 588, 890, 491, 965, 525, 751, 790, 997, 993, 399, 164, 895, 202, 265, 863, 484, 1000, 845, 78, 945, 152, 377, 278, 608, 306, 269, 467, 524, 531, 280, 805, 469, 375, 79, 48, 155, 30, 608, 816, 170, 712, 987, 33, 699, 48, 494, 488, 288, 846, 234, 545, 773, 77, 916, 482, 950, 37, 344, 447, 829, 687, 806, 452, 417, 594, 975, 132, 913, 864, 751, 200, 857, 224, 715, 147, 308, 97, 934, 410, 608, 844, 856};

//        // Apply reset
//        #10 reset = 0;

//        // Wait for valid signal to check output
//        wait(valid == 1);
//        $display("PK: %0h", pk);

//        // Finish simulation after some time to allow observation
//        #100;
//        $finish;
//    end

//endmodule














//module tb;
//    logic [255:0] rho;                       // 32-byte rho input
//    logic [9:0] t1[7:0][255:0];    
//    logic [20735:0] pk;                       // Output packed bitstream pk (2592 bits);

//    PkEncode uut (
//        .rho(rho),
//        .t1(t1),
//        .pk(pk)
//    );

//    initial begin       
////       rho = 256'h6d378ad2e47a0c996e37d52c55cda67bcca6ff8f1d2cd66439a8536bb684e20f;
//       rho = 256'h0fe284b66b358a39646dc21d8fff6acc7ba6dc552cd5736e990c7ae4d28a376d;

//       t1[0] = '{787, 690, 216, 813, 845, 504, 941, 243, 880, 649, 979, 123, 320, 1018, 881, 167, 163, 919, 22, 97, 522, 457, 526, 144, 707, 941, 891, 679, 91, 682, 26, 266, 132, 534, 366, 353, 281, 655, 619, 898, 23, 628, 642, 309, 595, 997, 851, 932, 439, 308, 568, 428, 766, 684, 932, 720, 641, 853, 908, 514, 713, 322, 348, 808, 670, 350, 149, 529, 800, 319, 494, 665, 1012, 122, 647, 830, 373, 358, 697, 678, 565, 827, 985, 277, 332, 555, 446, 241, 361, 915, 456, 460, 919, 298, 867, 965, 829, 630, 523, 532, 700, 89, 639, 947, 645, 604, 575, 201, 173, 206, 418, 988, 105, 436, 510, 120, 443, 172, 1014, 37, 676, 829, 346, 237, 248, 99, 970, 587, 741, 295, 343, 854, 58, 834, 435, 324, 219, 617, 322, 57, 806, 936, 53, 448, 617, 463, 842, 203, 573, 363, 143, 990, 660, 846, 715, 209, 806, 898, 205, 301, 573, 846, 27, 285, 58, 213, 949, 349, 1011, 330, 407, 553, 596, 395, 1017, 787, 664, 406, 899, 272, 908, 721, 718, 637, 557, 767, 790, 357, 807, 702, 370, 990, 231, 188, 390, 588, 254, 928, 226, 470, 750, 445, 851, 404, 61, 874, 627, 206, 997, 302, 80, 964, 318, 116, 348, 838, 484, 144, 809, 140, 917, 298, 887, 645, 798, 611, 738, 844, 178, 757, 772, 572, 725, 565, 438, 325, 815, 224, 485, 75, 394, 446, 291, 258, 952, 237, 477, 138, 80, 410, 165, 884, 155, 645, 919, 83};
//       t1[1] = '{472, 844, 430, 541, 644, 576, 861, 835, 485, 274, 576, 677, 357, 48, 827, 510, 917, 412, 920, 121, 912, 938, 400, 8, 962, 39, 310, 749, 440, 476, 902, 976, 581, 547, 523, 430, 799, 261, 666, 524, 865, 901, 875, 213, 760, 477, 610, 76, 404, 969, 1018, 427, 471, 928, 904, 738, 697, 676, 137, 876, 748, 260, 896, 867, 164, 233, 45, 562, 65, 79, 719, 922, 106, 102, 103, 119, 325, 204, 40, 569, 568, 861, 883, 237, 486, 665, 610, 1012, 5, 65, 893, 219, 746, 456, 251, 487, 707, 534, 731, 496, 642, 422, 320, 384, 779, 831, 747, 191, 264, 426, 676, 344, 869, 741, 278, 312, 587, 760, 829, 845, 733, 646, 489, 674, 692, 138, 374, 1012, 393, 510, 103, 823, 628, 164, 27, 412, 768, 202, 86, 496, 1010, 674, 471, 244, 1015, 418, 865, 819, 195, 279, 287, 61, 123, 483, 430, 126, 194, 955, 330, 82, 699, 522, 144, 461, 981, 760, 443, 800, 500, 383, 645, 918, 321, 872, 789, 807, 279, 132, 350, 6, 585, 253, 197, 289, 642, 377, 61, 614, 1019, 22, 519, 721, 278, 968, 303, 240, 804, 542, 744, 865, 480, 783, 723, 415, 139, 74, 311, 151, 38, 44, 529, 427, 732, 913, 420, 447, 41, 319, 85, 915, 508, 839, 883, 243, 550, 6, 95, 203, 725, 710, 402, 853, 949, 470, 428, 487, 1005, 591, 568, 42, 560, 986, 334, 1021, 206, 498, 238, 59, 115, 699, 441, 747, 866, 216, 520, 837};
//       t1[2] = '{1004, 907, 915, 853, 225, 653, 414, 419, 743, 819, 845, 967, 776, 458, 731, 37, 161, 548, 151, 489, 397, 497, 271, 659, 283, 14, 183, 728, 981, 689, 789, 197, 283, 326, 897, 481, 17, 539, 60, 319, 877, 656, 418, 1002, 375, 839, 432, 524, 514, 52, 538, 917, 1014, 1019, 262, 485, 384, 129, 327, 68, 622, 172, 1004, 901, 330, 233, 217, 24, 138, 589, 873, 778, 637, 330, 355, 607, 715, 892, 186, 240, 855, 410, 488, 900, 614, 610, 389, 450, 499, 639, 887, 261, 470, 559, 615, 794, 735, 573, 424, 465, 598, 178, 785, 886, 861, 281, 984, 614, 560, 696, 108, 817, 498, 227, 994, 901, 829, 493, 80, 576, 617, 929, 138, 670, 748, 400, 311, 421, 87, 19, 27, 675, 981, 750, 526, 246, 906, 391, 153, 83, 559, 832, 419, 789, 694, 495, 830, 330, 802, 278, 363, 10, 143, 886, 592, 852, 16, 304, 277, 724, 282, 301, 184, 123, 870, 421, 320, 555, 308, 586, 204, 701, 27, 1008, 248, 876, 771, 461, 388, 521, 66, 781, 294, 921, 897, 465, 446, 244, 566, 467, 319, 631, 443, 223, 245, 669, 280, 15, 499, 137, 963, 894, 655, 1015, 14, 156, 703, 665, 739, 284, 850, 851, 626, 727, 15, 163, 245, 555, 786, 908, 464, 78, 512, 846, 1004, 403, 650, 164, 223, 964, 423, 40, 320, 1002, 1015, 535, 58, 662, 402, 785, 821, 785, 277, 1018, 434, 25, 837, 178, 965, 475, 633, 383, 170, 551, 576, 778};
//       t1[3] = '{236, 178, 992, 512, 410, 1000, 792, 7, 250, 740, 865, 46, 839, 951, 632, 370, 898, 694, 429, 695, 361, 51, 117, 430, 901, 79, 210, 321, 620, 657, 951, 69, 133, 518, 733, 1001, 25, 61, 265, 642, 939, 703, 420, 687, 179, 423, 603, 401, 68, 239, 328, 35, 657, 67, 880, 228, 775, 535, 665, 538, 961, 189, 107, 202, 718, 271, 704, 136, 321, 262, 515, 893, 438, 27, 913, 892, 436, 837, 263, 980, 337, 344, 430, 681, 697, 49, 288, 355, 655, 412, 1001, 688, 771, 784, 271, 392, 43, 585, 126, 836, 1008, 272, 69, 392, 698, 394, 729, 745, 790, 397, 622, 275, 711, 575, 540, 963, 940, 106, 292, 509, 52, 379, 987, 861, 303, 67, 852, 296, 750, 178, 887, 434, 865, 303, 1022, 165, 6, 659, 596, 774, 606, 1019, 332, 227, 794, 695, 925, 967, 845, 529, 715, 713, 959, 144, 392, 863, 478, 953, 670, 741, 31, 272, 756, 49, 53, 602, 363, 320, 310, 626, 709, 774, 12, 25, 553, 138, 1, 593, 79, 518, 504, 830, 840, 880, 927, 960, 332, 787, 309, 302, 973, 65, 571, 998, 925, 239, 78, 292, 473, 790, 289, 433, 786, 679, 152, 851, 722, 514, 841, 422, 695, 981, 869, 228, 224, 766, 132, 136, 374, 580, 958, 947, 715, 576, 313, 600, 800, 466, 370, 331, 535, 1018, 436, 492, 236, 678, 16, 149, 633, 124, 805, 949, 21, 194, 996, 927, 154, 56, 24, 300, 523, 927, 64, 508, 247, 113};
//       t1[4] = '{1016, 464, 892, 83, 855, 639, 665, 74, 710, 48, 363, 43, 283, 266, 288, 907, 219, 815, 787, 182, 560, 737, 502, 197, 796, 496, 383, 854, 498, 329, 469, 450, 221, 876, 910, 706, 177, 809, 630, 514, 330, 676, 520, 773, 172, 277, 309, 59, 597, 865, 588, 426, 689, 909, 78, 335, 3, 639, 702, 876, 807, 280, 592, 562, 58, 694, 864, 304, 932, 582, 214, 524, 34, 960, 621, 31, 787, 818, 945, 250, 1009, 576, 113, 168, 768, 302, 420, 1012, 131, 653, 1000, 826, 591, 642, 769, 406, 262, 24, 160, 467, 843, 487, 831, 877, 519, 294, 436, 887, 838, 748, 773, 226, 826, 48, 213, 593, 969, 37, 545, 701, 315, 933, 691, 749, 768, 612, 294, 375, 692, 83, 966, 581, 294, 805, 395, 139, 280, 701, 417, 404, 172, 150, 370, 473, 172, 836, 586, 635, 125, 38, 474, 319, 659, 549, 324, 580, 529, 401, 865, 722, 869, 49, 964, 584, 547, 299, 839, 342, 590, 271, 130, 387, 824, 947, 398, 575, 859, 309, 833, 481, 709, 573, 967, 719, 570, 547, 997, 221, 282, 84, 660, 695, 939, 17, 318, 211, 217, 234, 208, 994, 228, 70, 750, 802, 563, 916, 839, 285, 45, 572, 523, 132, 313, 776, 951, 613, 731, 574, 357, 284, 289, 223, 695, 588, 816, 915, 845, 419, 635, 870, 655, 954, 117, 949, 193, 690, 644, 94, 204, 992, 975, 960, 252, 97, 910, 393, 259, 29, 882, 589, 216, 887, 903, 420, 358, 944};
//       t1[5] = '{900, 216, 867, 247, 426, 608, 227, 855, 597, 374, 516, 365, 336, 858, 411, 851, 326, 796, 446, 872, 1015, 391, 438, 694, 564, 169, 794, 270, 199, 128, 531, 824, 553, 885, 421, 659, 3, 417, 495, 425, 146, 216, 935, 646, 281, 861, 637, 720, 963, 492, 915, 716, 312, 238, 840, 519, 54, 335, 1019, 535, 599, 902, 853, 377, 937, 122, 692, 95, 608, 404, 841, 378, 609, 269, 1, 355, 355, 835, 828, 640, 306, 861, 673, 954, 136, 874, 879, 660, 767, 688, 564, 586, 755, 967, 309, 909, 595, 753, 557, 925, 214, 627, 1016, 791, 276, 87, 690, 530, 604, 72, 865, 761, 334, 604, 457, 483, 788, 57, 788, 598, 443, 491, 523, 394, 458, 703, 857, 416, 635, 709, 752, 346, 52, 844, 261, 80, 235, 175, 758, 808, 949, 97, 98, 449, 296, 756, 620, 896, 36, 812, 460, 335, 541, 753, 87, 183, 153, 130, 983, 291, 373, 836, 16, 946, 502, 542, 641, 645, 1008, 505, 734, 402, 263, 915, 417, 408, 675, 666, 517, 403, 579, 790, 554, 618, 760, 730, 603, 264, 800, 810, 338, 922, 785, 622, 22, 717, 683, 980, 782, 246, 771, 78, 774, 123, 89, 1018, 544, 244, 319, 475, 547, 332, 94, 109, 748, 725, 779, 0, 439, 616, 307, 855, 60, 65, 506, 296, 78, 976, 150, 293, 573, 280, 587, 457, 753, 690, 349, 525, 722, 100, 690, 998, 944, 265, 186, 354, 903, 238, 1006, 670, 114, 440, 793, 920, 728, 485};
//       t1[6] = '{225, 364, 494, 960, 903, 789, 935, 998, 365, 156, 242, 11, 961, 56, 255, 349, 903, 0, 447, 65, 1012, 66, 803, 966, 360, 210, 605, 691, 635, 204, 290, 638, 690, 266, 228, 656, 4, 358, 448, 285, 264, 611, 61, 536, 27, 533, 357, 483, 593, 713, 297, 204, 963, 431, 390, 1022, 144, 735, 269, 523, 244, 493, 783, 61, 191, 969, 784, 438, 147, 306, 160, 87, 459, 174, 61, 122, 288, 611, 896, 264, 362, 518, 472, 178, 498, 228, 846, 419, 367, 883, 967, 1013, 510, 215, 396, 741, 632, 10, 603, 61, 478, 190, 562, 282, 900, 890, 261, 324, 1008, 369, 640, 82, 958, 611, 151, 690, 991, 899, 648, 857, 131, 454, 462, 6, 867, 708, 667, 771, 427, 505, 780, 772, 202, 504, 799, 607, 38, 677, 393, 160, 308, 923, 769, 610, 867, 594, 156, 566, 209, 433, 875, 167, 857, 757, 587, 610, 277, 368, 847, 929, 435, 100, 440, 53, 171, 150, 757, 856, 617, 450, 913, 295, 481, 115, 1, 88, 692, 752, 1, 134, 360, 830, 117, 705, 849, 70, 900, 628, 943, 967, 535, 788, 835, 419, 877, 192, 825, 875, 350, 954, 357, 893, 902, 858, 482, 293, 473, 996, 244, 76, 476, 788, 410, 176, 514, 599, 880, 378, 126, 205, 557, 873, 341, 821, 963, 872, 208, 739, 531, 35, 774, 487, 376, 509, 232, 322, 478, 12, 462, 368, 702, 668, 499, 335, 1013, 273, 427, 837, 748, 941, 215, 58, 630, 713, 552, 722};
//       t1[7] = '{519, 768, 932, 123, 632, 735, 685, 302, 842, 484, 610, 1011, 249, 826, 61, 465, 457, 320, 507, 278, 866, 167, 211, 738, 311, 55, 382, 126, 222, 328, 110, 301, 1017, 751, 694, 880, 431, 384, 154, 485, 912, 1016, 846, 244, 557, 453, 700, 980, 467, 950, 580, 148, 905, 647, 729, 760, 548, 527, 829, 245, 659, 99, 791, 293, 139, 796, 914, 888, 385, 401, 334, 475, 646, 891, 118, 218, 861, 339, 154, 887, 379, 27, 439, 208, 949, 28, 628, 943, 745, 104, 889, 234, 806, 343, 165, 751, 266, 827, 354, 748, 54, 304, 225, 797, 556, 382, 486, 1012, 1007, 524, 782, 498, 206, 172, 79, 862, 553, 846, 340, 911, 486, 801, 452, 650, 718, 429, 532, 305, 624, 662, 556, 88, 813, 787, 505, 925, 474, 122, 248, 662, 721, 709, 741, 878, 513, 941, 527, 11, 616, 383, 471, 680, 692, 647, 756, 440, 665, 414, 431, 833, 782, 578, 59, 577, 509, 678, 586, 680, 584, 764, 475, 2, 376, 204, 588, 890, 491, 965, 525, 751, 790, 997, 993, 399, 164, 895, 202, 265, 863, 484, 1000, 845, 78, 945, 152, 377, 278, 608, 306, 269, 467, 524, 531, 280, 805, 469, 375, 79, 48, 155, 30, 608, 816, 170, 712, 987, 33, 699, 48, 494, 488, 288, 846, 234, 545, 773, 77, 916, 482, 950, 37, 344, 447, 829, 687, 806, 452, 417, 594, 975, 132, 913, 864, 751, 200, 857, 224, 715, 147, 308, 97, 934, 410, 608, 844, 856};

//        #100;

////        $display("Packed bitstream pk (Hex): %0h", pk);

//        $finish;
//    end

//endmodule




// ******************************************************************************************//
module tb;

    // Signals
    logic [31:0] r;
    logic [31:0] z;
    logic hint;

    // Instantiate MakeHint
    MakeHint uut (
        .r    (r),
        .z    (z),
        .hint (hint)
    );

    // Testbench logic
    initial begin
        $display("Starting Testbench for MakeHint...");

//        // Test 1
//        r = 23'd1000;
//        z = 23'd500;
//        #10;
//        $display("Test 1: r = %d, z = %d, hint = %b", r, z, hint);

        // Test 2
//        r = 23'd2000;
//        z = 23'd1500;
//        #10;
//        $display("Test 2: r = %d, z = %d, hint = %b", r, z, hint);

//        // Test 3
        r=8380416;
        z=1000;
        #10;
        $display("Test 3: r = %d, z = %d, hint = %b", r, z, hint);

//        $display("Testbench completed.");
        $finish;
    end

endmodule














//module tb;
//    logic clk, reset, start;
//    logic [31:0] r;
//    logic [31:0] z;
//    logic hint;
//    logic ready;
    
//    MakeHint UUT (
//        .clk(clk),
//        .reset(reset),
//        .start(start),
//        .r(r),
//        .z(z),
//        .hint(hint),
//        .ready(ready)
//    );
//    // Clock generation
//    always #5 clk = ~clk;  // 100MHz clock, 10ns period


//    // Clock generation
////    initial begin
////        clk = 0;
////        forever #5 clk = ~clk;  // Toggle clock every 5 ns for a 100 MHz clock
////    end

//    initial begin
//        clk = 0;
//        reset = 1;
//        start = 0;
//        #20;  // Wait for 10 ns to ensure reset is applied

//        reset = 0; 
////        #40;  // Wait another 10 ns to ensure stable input signals

////        // Test case 1: Same high bits expected
////        r = 1234567;  // Example within modulus
////        z = 123456;   // Small change should not affect the high bits if r is large
        
//          // Test case 2: Different high bits expected
//        r = 8380000;  // Closer to the modulus, high bits likely to change
//        z = 1000;     // Small increment could change high bits due to wrapping around modulus
//        // Start hint calculation
//        #20 start = 1;
//        #20 start = 0;

//        // Wait for hint result
//        wait (ready == 1);
//        $display("Hint: %d", hint);
//        $finish;
//    end
    
////        #20;  // Wait another 10 ns to ensure stable input signals

////        // Complete simulation
////        $finish;
////    end

////    // Monitor output changes
////    initial begin
////        $monitor("Time=%t, r=%d, z=%d, hint=%b", $time, r, z, hint);
////    end

//endmodule






// ******************************************************************************************//