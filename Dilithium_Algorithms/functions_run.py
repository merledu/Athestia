from Dilithium_Key import *

q = 8380417
rows_k = 8
cols_l = 7
coefficients_per_polynomial = 256
eta = 2
η = 2
d = 13


#---------------------------------------------------- KEY ----------------------------------------------------#
def IntegerToBytes(x, α):
    # y = bytearray(α) 
    y = [0] * α
    x_prime = x

    for i in range(α):
        y[i] = x_prime % 256
        x_prime = x_prime // 256
    # return bytes(y)
    # return y
    return bytearray(y)

x = 56758491223782255116706065660090661450792979282557094739072532684472550750973
α = 32 
byte_string = IntegerToBytes(x, α)
# print("Byte string:", byte_string)



import math 
def bits_to_bytes(y):                                                       
    alpha = len(y)
    # print(alpha)
    z = [0] * math.ceil(alpha / 8)   #The byte string has a length of ⌈alpha/8⌉, math.ceil() method rounds a number to the nearest integer

    for i in range(alpha):
        z[i // 8] += y[i] * (2 ** (i % 8))   #Adds the bit y[i] to the appropriate position in the byte string z. The byte index is ⌊i/8⌋, 
                                             #and y[i] is multiplied by 2^(i mod 8) to shift the bit into the correct position within the byte.
    return (z)  

y = [1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1]  # Example bit string
z = bits_to_bytes(y)
# print(z)



def IntegerToBits(x, α):
    x_prime = x
    y = [0] * α 

    for i in range(α):
        y[i] = x_prime % 2  #This operation extracts the least significant bit (LSB) of x. Modulo gives remainder
        x_prime = x_prime // 2    #This operation effectively moves to the next bit in x. (equivalent to a right shift). Division gives quotient 
    return y
x = 4
alpha = 3  # Number of bits (we want 8 bits in this example)
bit_string = IntegerToBits(x, alpha)
# print("Bit string:", bit_string)



def BitsToInteger(y, α):
    x = 0
    for i in range(1, α+1):
        x = 2*x + y[α - i]  # Access the bit in little-endian order
    return x

# Example usage:
bit_string = [1, 0, 1, 1]  # Represents the bit string 1101 (in little-endian order)
length = len(bit_string)    # Length of the bit string
result = BitsToInteger(bit_string, length)
# print(f"The integer value of the bit string {bit_string} is: {result}")



def BitRev8(m):
    b = IntegerToBits(m, 8)
    brev = [0] * 8

    for i in range(8):
        brev[i] = b[7 - i]  # Reverse the order of bits

    # Step 6: Convert the reversed bit array back to an integer
    r = BitsToInteger(brev, 8)

    return r

m = 13  # For example, the byte '13' in binary is '00001101'
result = BitRev8(m)
# print(f"Original byte: {m} -> Reversed byte: {result}")


def montgomery_reduce(a):
    QINV = 58728449  
    t = ((a % (2**32)) * QINV) % (2**32)
    r = (a - t * q) // (2**32)
    return r



def bitlen(x):     # Calculate the bit length of a positive integer x using a loop
    length = 0
    while x > 0:
        x = x // 2
        length += 1
    return length

x = 32
bits = bitlen(x)
# print("Bits:", bits)



def SimpleBitPack(w, b):
    z = []
    for i in range(256):  # Since w has 256 coefficients
        # Step 3: z ← z || IntegerToBits(w_i, bitlen b)
        z += IntegerToBits(w[i], bitlen(b))  # Append bit representation of w_i to z
    # print(len(z))       #2560
    # print(z)

    return bits_to_bytes(z)
    # print(bits_to_bytes(z))

# Example usage:
w = [787, 690, 216, 813, 845, 504, 941, 243, 880, 649, 979, 123, 320, 1018, 881, 167, 163, 919, 22, 97, 522, 457, 526, 144, 707, 941, 891, 679, 91, 682, 26, 266, 132, 534, 366, 353, 281, 655, 619, 898, 23, 628, 642, 309, 595, 997, 851, 932, 439, 308, 568, 428, 766, 684, 932, 720, 641, 853, 908, 514, 713, 322, 348, 808, 670, 350, 149, 529, 800, 319, 494, 665, 1012, 122, 647, 830, 373, 358, 697, 678, 565, 827, 985, 277, 332, 555, 446, 241, 361, 915, 456, 460, 919, 298, 867, 965, 829, 630, 523, 532, 700, 89, 639, 947, 645, 604, 575, 201, 173, 206, 418, 988, 105, 436, 510, 120, 443, 172, 1014, 37, 676, 829, 346, 237, 248, 99, 970, 587, 741, 295, 343, 854, 58, 834, 435, 324, 219, 617, 322, 57, 806, 936, 53, 448, 617, 463, 842, 203, 573, 363, 143, 990, 660, 846, 715, 209, 806, 898, 205, 301, 573, 846, 27, 285, 58, 213, 949, 349, 1011, 330, 407, 553, 596, 395, 1017, 787, 664, 406, 899, 272, 908, 721, 718, 637, 557, 767, 790, 357, 807, 702, 370, 990, 231, 188, 390, 588, 254, 928, 226, 470, 750, 445, 851, 404, 61, 874, 627, 206, 997, 302, 80, 964, 318, 116, 348, 838, 484, 144, 809, 140, 917, 298, 887, 645, 798, 611, 738, 844, 178, 757, 772, 572, 725, 565, 438, 325, 815, 224, 485, 75, 394, 446, 291, 258, 952, 237, 477, 138, 80, 410, 165, 884, 155, 645, 919, 83]
y = bitlen(q - 1)
b = (2 ** (y - d)) - 1
# print(b)
print()
# b = math.ceil(math.log2(q - 1)) - d
encoded_bytes = SimpleBitPack(w, b)
# print(encoded_bytes)

expected_length = 32 * bitlen(b)
# print("Expected length:", expected_length)
# print("Actual length:", len(encoded_bytes))




def power2round(a):
    t1 = (a + (1 << (d - 1)) - 1) >> d
    # Calculate a0 (returned along with a1)
    t0 = a - (t1 << d)

    return t1, t0


a = 7011276
result = power2round(a)
# print("Result:", result)




def BitPack(w, a, b):
    z = []

    for i in range(256):
        z += IntegerToBits(b - w[i], bitlen(a+b))   #subtracts each coefficient wi from b, converting it to a non-negative integer in the range [0,a+b]

    byte_output = bits_to_bytes(z)
    return byte_output

w = [1, 2, 2, -1, -2, 0, 2, 1, -2, -1, 2, 0, 0, -1, 1, 0, -2, 2, -1, -2, -1, 0, 2, 0, 2, 0, -2, -1, 2, -2, 2, 0, -1, -1, 1, -2, -2, 2, 0, -2, -2, 1, 1, 2, 1, 0, -1, -2, 0, 0, 1, 0, -1, -1, 1, -1, 0, 0, 0, 1, 1, 2, 0, 0, 0, 1, 2, 1, 1, -2, -2, -2, 0, 1, -2, 2, 0, 2, 1, -1, -2, 2, 1, -1, 0, 0, 1, -2, 0, 2, 1, 0, 2, 0, -2, 1, -1, 1, 2, -1, 1, 0, -2, 0, 1, 0, 1, 2, -2, -1, 2, -2, 0, 1, -2, 0, 0, 2, -2, -2, 2, 0, 1, 2, 1, 0, 1, 2, 2, -2, -1, -1, 2, -1, 2, -1, 1, -2, -2, 2, 1, -2, 2, -1, 1, -2, 1, 1, -1, -2, 1, 2, 1, 1, 1, 2, 0, 0, 2, -2, -2, 0, 2, 1, -1, 0, -2, 1, 0, 2, -2, -2, -1, -2, 1, -1, 1, 1, 2, 2, 0, 2, 2, -1, 1, 1, -1, 2, 2, 0, -2, 2, -1, 1, 1, -2, 2, 0, -2, 2, 1, 0, 2, 2, 0, 1, 0, -2, 1, 0, 0, 0, -1, 2, 2, 1, -2, -2, -1, -1, -2, 0, 1, -1, 2, 2, -1, -2, -2, -2, -1, 1, 1, 1, -1, -2, 2, -1, -2, 2, -1, 2, 0, 1, 2, -1, 2, 2, 0, -2, 1, 2, -1, 1, 1, 1]
a = 2
b = 2
encoded_bytes = BitPack(w, a, b)
# print(encoded_bytes)
expected_length = 32 * bitlen(a+b)
# print("Expected length:", expected_length)
# print("Actual length:", len(encoded_bytes))



#---------------------------------------------------- Nist testcases ----------------------------------------------------#
pk
sk = ""
# print(len(pk))
# print(len(sk))


#---------------------------------------------------- kat testcases ----------------------------------------------------#
pk = "770e3dce04c9ff59cf5a05a04b527e9ec4cb615ffcc930a261677fc9fa4fde7f80b82f873615f3d08e4f86e80c1cbf895e85b7cd8f61590c5960e364e8bb850d02cec029ee2dc071c7d328cd7bac91cc76780cf810266778dca047f309ddc40c01a9cc3248ed4cded489c743aa58fb16d7b37212f9d5ec60bd76592ef7ea0acb5e22cd48156b72430e9665a50f072cc24f34a7c834ff52437ac472db327bd56ef0e1836ed588332dc0562717283c5cc6f0dd170f2c4e440f53a479b19445a9d6e7c174d85b92a120cf5476d887da5caecd93d61cbbc8fe8a4f2eff097852dfec2cfbcbaefe4d96c6a5ea7f83c6a8919e999052539a230b7ca8b632be22fe31c278305d8242176605b723f41fd85b7ad66a4d5a882d2ebb0052dc7c576cca9098927b682c11070bd447712f83f19173d3bcc4b2edb4916ae13bd7ca37d16f6db23c03835517383bf603816df64a48cc6c025fedc4a4f2fc87b5a8058fdd7c619c4cc2c1280161cb895b16f8c27eb7b4e62f74c6a8db61d238d67c9c374623232c6d4194fb207aff07d4c839f1809b89940bbe79fa707dd30c3a004a66d561621ab12479d40d8aec32c17eaba8b49ae40ddd817a26a398de85ab3c52806d49202ac8539447377919a73d60b9d08b18f450796bc4346e3daf0ffb1b432e8fa9da57fee603344928949de37fdabeff64dad7b1b10c8291e9ea4e149073d7c22c3813156b9150d5431e74747a5cb00b108e90d59ffb5b7b72710955c78a3b8c28afb46c722927a09de612fb1c7b63f2892774b7f31ac60574fda9b01f0a393ef01c5f2d398c8f0706e51c3ae9ee8f295eb2059321513b7f617df3968289106d72f8e696819dcf9fee363721e31f6cbe4040e6d698d1f554e7a4ef2866c218b352fb4d15b14be0b93eaa56ff598a6e5d0a4cbf9474b5b11b354dafd755ff124f436e7a1d8b4a995849a2ecfc36803a3e0666fd3e163f07aeff24659f05a707306da56472005f9a22b0c74b5607102a5e5a0e4cac36cb110ec447414873df4cb15c4b3fdfeb57df0b79e184101fd82da1a07b6b4b9537ee2c1f125a5082322759a9211eda06060a2eaf9172658351e1e34f6f52440de5fd36daaf253e80ef575c122e7975e29e508c86f1cd989be013295df90a1e8d9230617c378c417a95a00140329b2cb4e704ef2862cc2dbc14296e1e754312e703470ce330d53966a9814444324404f4d2a23553a55189d0d4759004bcfed14139a3c3534ff586ee522b8b64a4f6e6c4521ea05362fce9bac2d3d8336250e619fec5c742a32a5c3d143d6f2cb50e0ff9c9cf5510bc0dcab2c2386698c7c2230c30cea8b4420ad26f7ed7b26e163c64718a391f41a849f089da698aabf7e102d4433f477b32ea0bb5a9c33b6933a0e4e9e0fbb02460984965c2dfbe52ca0b20b55a7ed2972180103abcea7acad3a3e92d7dcdd7a1e0726a0394417f8362b9193cacdf37c5dc51868ec19ed5dfa378d3efbb663d8272495525c6cb4cb53331e72f96e9f6e0eafdbb63dd6fbcd36bd0667e86dac23a961b09471d6f14def97f40edf82d4c26e6d2c74baac76a39384ef5af7d0126299415d74d3b27745342641ca8b9aacf84d3d0c6c2997de528c6130e125eb81030892eae52980c08052852d6fdf4ecd06c4c3d80f71fdca5f78257f32f374b7fb6137a9ab4ad16a2a1484c253d4a0bf77248cec323e91754cecc3cfea6d4f5ab5632cd70f0fe04f13c1c420a98257256ab049b522cd0daca8b797b18ee88fc28423af4b3a4aa9fe2ec1750ec148319c5f0efaae8105d081437b65ecfa7543a03674f3c40c782bed5e128fe563e857310c5ce4bac01f3d6acf0872ebff86de580fe67bb2a80b92875d0e42d79a4be69186b17596e1cf772ff6737b08c9d56fddc22f67c3d7f05bb5182c3d76a82017a58d3a06016fbbfbbddecb20a0ae439c11752c5d33c3518cada1980c8a982bd194838e00bee9953853281f1cd9f7e9289004c10e6bd8e30f813f624c019f5268cc1fdc149b413a85ac6bcb2c0d37b317406fa56fde397d4d4857f814dd9778e8193491e35333aac8b8a7f92420578149cb0863a94b91fc63120fc95feb5c6d85f772884ae2c63042fd9384849489b58940619d3722f50b557ac1434c6906852df0c7d19b1bf87996e9f53de79357ba51063d8b7f12edcad300f03eada00feca1e3bb1defd5e0b3503eebb390061c02296c58708aab61b0f4e43113571521a962b2f4114cc032bbbbec84e4bd45059caad42fe1e1e0032dc1a92fb0114d1d7f626f0a72707d876f6bd62c23b95652f6214de2217bceed621821d64613b090f938f4b2c1683b01671a87c228bb4d76344b747c8ddf722204aad3ba88c8e41f5b679e84c919f6917f5322fe723392537bc0bbd27999e4bcc83ab10762388acc9e9564e055b4a41d9f3673dfc2934417e60ece2a50d1c35097ddbec2eeb88c727accbe527e5bddad6343fb42714806fadcc13e5dfc86f5e13f1755a208bdc91943f6308539152d7d4d1f74a93b2010dcbe7b948c1b6a9d2e8c8c07f219170bd270922ac8f4a56d0d325c20c994b6f9267a2ff2b4805006e4d6c821900fe569e3c7ce6430ba2091aef7262dbbf46aef2570e0897db3d0fdfb94a7c5163bb2127ef527b44d7b6144bdb561e5ae00f7528f4e0f67a28196978ab0cbce640e6ec18584a625dd390f2fb01d6fdd1b2a82ce179375c25189a613b7ff73fd73a4bf4adda318ccd58a1e1c7363b8ae90fd9b0c64c2e469132da703ba0121b6642ebd7087bf0b4e932f8b8a9fb36ff4a8b5025d8c08b18b17b92469806f0ca5e3205d4a36e87dff959943539e7472621e0522c4be5862e5533b51f48c799deea7d9adca27c6bcbbcc206bc8b66b5a2cb4093722450630ad5f923c9560c1470fcd6358f72d420cf8f0421843c1031746f371b59e7d65df66463bfade99f133b90a9507ee97ea3b921d1b2418b95fdc5ddec77043782555d365ec8be6421c192185705eb75d0e7dc5d09eba26aeef2d1b031d3bfa581852507f4d132b1261d9e256e1ca3d64912ad85ad96e472aad2b1747cf9774ff2367b85aeb0e44f73c91edfffed98b79a1f3cb72b194e0f3fd43aba4583252564e9ea391f8a93628db98357086228447cb6b195137c6756d5440b86cc630e00368a475ddfe60bc471ad55cf12ebfb18fc1b3237968fba13d2648f155ff41dab5fff93779b698996429a8a0310171c0b7035bab2622b407b6932dc186b3fe5cad728e702d894ae05cb38aacbbeb76567fd31176b819fb101fbdb4b1f97e6dcb767c67b3c73e5d5127c9643b3d71ae25d6543a1444ac95b36f61cfb4ca3fc50b49ecb4736e204a6d49dbd9299d479f6c42f3cbf195b38a2328e608d246a0f0b73b48d9c417f04dbea3542fb256760d230c8f453e762e8f10ece841a3fa12cc72222f98ce1e8a509a63dad6e4dbee801a2af39160e00b1ac1c1dd6c4242799aaefd174590087101a6fa2e400b4f31ddf7a101f3a99e4b2b2aa09a22dacd7fd15286b97c0b9eac1ffa945ae5fdeffdf9de7e80dfbd739f4b1bedda697945fc90f77057c66fa003ba527be8c1424b049c5a257259ba65601ccb79a8c2761a61d63670a66d4ed9b0937cc7db24d922e2b1861858a004eec180555dd41e4c734d918"
sk = "770e3dce04c9ff59cf5a05a04b527e9ec4cb615ffcc930a261677fc9fa4fde7f80d7679d91f8dea8185d8bae5dfaa501440babe547c0dd6fd1e9e4c6f8cb6695b6c1c2736dbb308050a5767c2472127e2ba421364a4d0bb1ca5e432bfdba7ab5bafc3b51ba17155aed173088a88e1a41cbe822545493ec17ad43ff670a2996308c3611e4b890244411a1c4508aa09110025293a6604b9264d3824d0c392c88382094c80509150a8c183161420583489164342d033900cc022c92420604c384c8088604b32498b40413a141144290644890d4327102175189a62890a41012a20cd48889da144c0a268413054a14b9296124209b3628c3340e62b670dc143118416e2489802214314210010ca90c21334624920803056d84164ac91401924429a0388d02a15004848cca984994984514b11192088ecbb86520b780c2308050144462304593822908066612010898925183a065d2a088c23488102580d0a028520469c932869b949024a510dc9429220029011286242848c81409a240121c278d490891c4b02804246dc0382a812266a1204514a15064b449ca385291382d580489cb4670a382914a204622a0699c866d4130692142504bb890db148d5a18692283119b26309c9645c234020c92251c096464188d8b408e0cb32118b66c02c7290a46455808501a980001034121068e13134482924908410d004292d02011a3168a00250dc4001224938c841630492202c8c269e4420d141972e13089d890650931298c444cd3860c110001043211039311dca2111c2765a10230a102041a866099a691e11485c8044edc261152a208dc28861906848902811305291a970d92164e19a96409480dd4382e940885e23271a3266900328ed93431a2082512a5701a326098a24d242601d9848c24b62d11360a21018421a24d48a84511344e90464440a80c5b0020a32072a3066c894892d3a68504250e60286609020d139760e29605e104111c295214b3650b069048088d13c48da41886944485081331d0060a62448953b08d248761c9a60052084d1321699b488a24342c88960809c709a0001222084a444452da122521a9881018280b814ca13090e4c68c52b250a3b010639011dab0094898899934455222708c488594448e213901d48608c1a864c39029c8102a42246d40264403196ad00688099784c4101243c07062222250184dd8104d91046e52220e0c2286111182a0b845d0064600386294a08010426d50226ec102890a24666196316100529b240950142dca380223152d1342055a468c1b015009b06013c201c8b489c4148d53c2441384900c1090d2a82ccb328e24a66888224014208d0c4985c18480223670424642c0200a9c8488112991919668e4222c0313855b42889c144014b468ca384c013746d4a06563187202c88d8a442e50100cd8c0215016918ca0511bb025dcc240c402426240212190495ac68411130e223466d2a68da2886963140ad9a48952124a11b591e30002981021044440540400dac465e4808593a880410471db84915b04495b2048248970cc4251d2a400c9a224249860241362424071d3888400034c19974089324c5a4210e4486a51126594088e82b64d80124813884193224854348c9198291090281a958d8c360d8206299410860916320c472988c62da0c84d5bb48118185211220c0096818ac88c1c2882a2b088c334064410821b8109ccc89123a40500a06808194a88204224b069c9b66d01454c94184ae008440b010a2445608c3242dc066d938864da3060a4267260126ac124291ac3848a16710ba16598c40cdb462c13121160b6045c166143c825223509d9486d4c288888402dcc186c034091592649dba04009c250d80045094532c2300e04069018182102c70908340658a0611b31710a422edb0009c4284259480a2481699a9820e1160a41026400122952925110126a9024621932061b4480d0128851420c64368062204620c380911069daa40dd3b02d44a48413246e993608c3823190a48d4bc485a28244ca34461a120d94a868ca2052010545d3c04510890d92c241d3402504088e4c1266cc160cc012711a055201946540008a9c100190286c0125521836100822081b1521241540421848c4a8681c4470e19445d2440949442c80407081908c04388a04b91019b5881096119cc68cd230300a8990c300521fe3219f48bc2b4cebbdb1b1ba5e260d1d13f3990a07d34a889c550eb6b65e3e04e9d3ec8cea604c735b4ee95bfd5b66d451cefac1da3f45aa1464307b02fb53169879d4a93ead8b3215f6c83c076f01cf2acc934ee3841a2facae5473643571206b2f5738e2030c698bd6f9dd5af187670b204f306b0cc02f34a3dabcfd188bf991c9fceebbd8f0fe0d68f080ccd11bbd7b15ce81c2bd07adb0dc0655c212da78f601b97c56824502710bda0dded6699a7784752ff1257c63672b075103bbbd3e35189af07228b224bc605cde4ff3c15a1e7bbcd9af02fe1c7096d81d682d76b23a23ef80bfad5fb4287e342c8daaa1b0c4324d1456a3f90e45a575842e93881d62a98be37a06d666d0d4cd79e9665612bfc4a0b35de6679d12501c4975afb1e88949927b030d9104e7db91a4126b6a93586324220a3c2d6603759a8146d7f6ac637c1b3761fcbb041da54518fe17deb9960945d9709a34d8fdc4abf35572d4cc055c77973f453a485a30fff3a7dcc89279e6be0a15552ece0898005eb87b85b6be031d0e24824601882475560746b4716eb7d826ef65b696dff0851459b59b5764e9ce80bc7fac6e149d795011538738c0330ae0d1a4e3b32b4221effc062a03e338264526ab3a2a2c54c525f666560f99677bb198fb0b5362d309479f18fa8904d3eaec879229343935812f2b30245e0043743a6565cc89cd2b08426d5087d673469be2ad2fe2b133a69cc5c18dc08d193fbaf185df24a283ef6010ad4c8625d98d51e440760d948a7beb2b535cb68e4ec2ffd277566410d3fd9e339eea1795878e0c2d55c03a739135deb1399b1ee97cd4e60e45b67717325a7d26ec00694bc8043b4b9371d7ca310bf0a86035a4c7aa8129206c005538d0c8ccfd62a30eb210fcb86fab7cc2739d544f7bc4e9c05dadae9f8fbef0cb872fbac61c3016b21606d3d3d633bb51cf5a8f6a3b1830d66ed14f3b05a2cb2f521ef052b07c22663cde97baaaefbaf859347235308fb0423825ea2136510fd226d540cdaa9ca350132b6696aed0b0449b25392839fada7950ac3e37393b937af19ca5360692f24f0f16e0f33af1fb0294382874d27f8de01b6915b12bfdf36c6aa52cad659496a7a53060c838a0b5e3d34bbbd78964f93638e0bf5b54fd61dfba06bc2a587f0b821eead190f476fb378c349f31283afe86b8556a1b60bd332f30df399502ce9875617bf7716301c6224d3acad9fc9bdc531ad6267bd8fe626d4c8561004b12f50d52cbdda6aae735b44b6abba37de33598c6710fc310563251076d2c315b123c9d9dc9d526145db2f343315252e656aadf3ffc84381c20bd71d7fc0ceacf54a8a213baca116c408a3d08eb0dd582e03b0a280181354e62180a5a11a02397b8990d4b019d05a1c99e91683498336b1a34a3d25d6982d332b0bb92bf7f7a5ea4cf6ca352cf285400c6ddb51899305cae4d3ac79e9b1ae9f0f988da6354542ac1605fe95d19346394e8540cc1393907439a8ef78d028146eaaf770eb9289c64d11a3758bac049116a76e05cf7cd9455ad3c8f49f70c80791046f533b3f839a341e0ed681941235f97a056ae0fa542a40ed04cf352be4db444334602eae32efd589999a875fb6dba6da607c5bc07da3f05a0278f9c199c8c7c93fade5e708e5578323cb77a3ee5a5923c66c08332e8359c9de047b79502d26af4f3ca6485914f11b9bfc8b003a876661edfaa5f944701c85eee7d2e5ce38b0d48a307e84108735de68fb274014b443505b7e65365fa9e8e63c40be690926720e9111e5c2dda6eba897a74e3afc67dafe61bc224d9c5c8583ed8168688d9dd223b5bc0d83de1848a7c1347d8fc92f493b2092d225d6273e221c85b816de52e684a25bf00571573b1c30d9f99d429494a11948175adc4ebe8336e9a5c2ba2f283930e127eb347a4c55a8862e1535a35d716a8d3386611ed500046bbc81e0b204c5f4cc115c8db9c6d5e2fc83a0664dfde67e050b6db60934b5742ebe42f2c8acb92f9b599be8a7ac60c269b33a998c9d5f953b592cee9e941ddc566dcd74b0d511768a86a861b3c6bd5de35f8d68bedfca1ba834f628885062c222dde615ec5ad553817ac9e759b3522ae15d1a717eb47e9a357a48f037007a52b0eae1733789050bccf787dd302ccc47c990034bcfff2df97891092018dcd9211354b8e4eb06f7c46ba8144384b27ca39114bcc52f00a90f92e670133b4c0bd4bae5c15ff3a16e69863ec1771a2ccfa4217c4e1209c1585fadb43495c070ebf34cd5377c76b0e7cb7fef1c57f82ff0d53f77a7014287105ff8cd76baf0c4412ac1e9fcd083c3ea483982379ea3207d66aa53e1df6580fcb6f93c7949ffcd0fe12e9e091b3933ce87111242546704552fb8d21606175aa9e2c8c41f3325aae6b33d8b96f657660023861466347aeae881e2f07fceaf2f59f2552109cbfa7fab9d1716ef28606a9491b7ea5a591a11b580a74f0b5fe29b53aa1ee371b64f01a5d6081f063156d83ea8b656cd69e53486b57567a08824be9c2e137aff32906e738dd595a1bff2ac17f1af98fee9fbd408b38b3aee0b3c352e4baeba9a9c5215ec74b2a6ed3dd1c9639640a10d2da262ea0416a49d4ac0d71c35d4c2b6f20ff2870725987e05ca04038aa6b1bbeaf4966c6459bc63ff2f6e4bc4feed9165141e087e16fb488ff7381a9693833b4c5c360c219aab9aaf913c169b0857c9f7fc06ced11653cbd17a7b9dd635a650dceb6097a955b1508b426428af3d3d12dfeb5032b84fc05ddbfd4ffbd3aadddbd2fcbb283ca3165e08cd4db867e4188e1ee7b80f5f14842fa225de735e5956e674a1c6467fdb97961252b0bf0ed5c8da7152fb533923a0c874a4355632dcf7724a582582bb1d2a0d2b71c7290f25f78482671ff8601d069a9529bc45e4ade6f677fbebda27295ecf7926948b7e5e250913621e240545f7070c760e188fcdba02ceaa5e4e33c4945ad029d2d08627f9563f36109dd7f7a6ab88c4faabb770034e3da1f9c75a4b706f4e4505e88ca617247c392cbba017c26852dd241b3ed92dd1b42078d65df901a086591112f244c882c08f14a10e72738fbe06af8b7d9b6cf5877a7c197cc09a4937ba53a3c69e8942aab55bd9f8d8baf9336b9182421d3d440e4f5ec8b66a3c739516489c8ea20c450b98ddf13cd9eca5a05e1d5960a2e2189b32242105fb90e66863ffd91f4f6565cb1ea368d0f7cc91984b76a8222f5016fd55fb2b15cc63cf91483164d54bfe92b3414a5078e44e1533ea31abce63df08ba299847495891de2435c198df2729886e19e1c97f8a916a8ee876ca75aaeddb015eacbc116b2be7ce119c1612f1c695b7c0dfbec46cb6c2a5662b7da4bd995b87267f021b88a6f1f8b0b8c33c0b8252af14a38a4a026daa579ca00496062cb50acbf9ad11d439e876038068f0f3537b7f634c30dc8325c23003c142de3642459dc35facc88875323c816081a9aa3e7f1efd68d02b060132397bc1ef2112b3ded6a7202ea65ebee73df7f1cdc6b9cae85850b13be41fdf176f5c9a119f513cd9418c5078283e0d155e6769511d8bbf4e74d6c5ad03118935afc71981b6ae6ca490da0b9efdac5dba3fa2da3bea4678070ed31c66c8c5e93c72e9d5359162f19ae5ffc3d1eec453c5e79d287d7997eab64531cc5b3b0000298893eaf94ba805c71a3a07d3579068aa5cdf5b95acdd879cc5b23950184993e62be1386c9a924dd9dd9e232d38b1d52cbd73f023476e3f6e8f4bc1b8383eaae0a73af763d40ee5944ee6e7a53b37589b7ee893b6beadada7c824d283f7e2f40094404ebe9a17a3ed787f293ea526dc141be8a8738d266f8be398a3577c0664af861097b2ee826a411c43b364bf52ac5fda33d78f8f0a94808dfe17a0b0ccaaefe741a0f94734fa332798e4009d3575c7ee1d9e8a8c32f8c982ffbd1f316cf39e835b04eb5eb4ccf4bfbc1ef6bcfeef8c5fc2ac2623a16f50e596615a456aad41030654c3589abfbd680966673aa93129b4d48d60c8a11ed6c3af832cefff09f8cd9c188d3e9bde3e2911fc7139072c86ce9355e84c83b82881b384e6ffba16d9c64a32af8073e4c3e1089f6e54d0e2c89f81b7f04c2ebc9b7237c0e741d98eaae1980296263a967a917ad9cdcde78e20acf1e6214f84d77bebe46cffd4b515ec3b0df7a123170836397cf240897b1a5edc64743634fea9b878cc45624fe1eb5ef990fbc70932ab7b8af8b3b3526ace870da483b0003cd11f43c3c12c059d9d591dc4d74b3b25a0553bf51b8cee04e63f6ac17c892aa496f6f1a94148d97455d0bcd7ddb30ed0f1271347e48f95293577be0a187f0906dcd03c350972d7508166026ccc249cdfe7e63faa5298044202ee6acbeca822908d703b5b5815d67141329a09bda2cf35607e7ba15e4fe062b3d014080a06ea44adb38ffaa17ea05a3aa32acc589ba8bf8618f2aa2e9badc3bb2d27bce035cfcbf038e585c836823b2ead697eb0bafbdd929be27cf509284ae1289cf624661e635797f53f386a7c55287294faf1a5e46245ad58304149ec6cd78a862b1ce8beedf23481a01706ceb12c35e3eb7b81beea1f763025a961b458208ff0259b6bc4d681d2cbab72cceeec8984142dace0db56f0ed39a4b7f4a79543198a6f19a89b3cb4e8344f4ced7cd2c14007ea029e31e3d9affaf0d04b178"
# print(len(pk))
# print(len(sk))



#---------------------------------------------------- SIGNATURE ----------------------------------------------------#
def BytesToBits(z):
    alpha = len(z) 
    y = [0] * (8 * alpha) 
    
    z_prime = list(z)
    
    for i in range(alpha):
        for j in range(8):
            y[8 * i + j] = z_prime[i] % 2
            z_prime[i] = z_prime[i] // 2
    return y

z = b'\x0A\x01'  # Example byte string (10 and 1 in decimal)
bit_string = BytesToBits(z)
# print("Bit string:", bit_string)


def BitUnpack(v, a, b):
    c = bitlen(a + b)
    z = BytesToBits(v)
    w = [] 
    for i in range(256):
        bits = z[i*c : (i+1)*c]
        w_i = b - BitsToInteger(bits, c) 
        w.append(w_i)
    return w

v = b'\x01F!\x1c\xa4E\xc48A\x10\x07B[H\x88L\x10\x8dR\xb4e\x92\x12H\n\x12\x92\n!dD&\x85B\x041\x0b\x16QQ\xc0\x81\n%\x90P\x10\x05\xe0\x86a!\x11ba2\x06I \x81\x1421\x029f\t `\xc9\x00\x11K\x08\x11\x11\xa0\x88\x914 \xe4Fe\xc0H.\xc9\x88\x11\x83\x82\x01b\xb0$'
a = 2
b = 2
result = BitUnpack(v, a, b)
# print("Result:", result)




def decompose(r, q, gamma):
    r_prime = r % q
    print(r_prime)
    print(2 * gamma)
    r0 = r_prime % (2 * gamma) 
    print(r0)

    if r_prime - r0 == q - 1:  
        r0 = r0 - 1  # Step 4: r0 ← r0 - 1
        r1 = 0  # Special case where r1 is 0
    else:
        r1 = (r_prime - r0) // (2 * gamma)  # Step 6: r1 ← (r' − r0) / (2γ)
    
    return r1, r0



def use_hint(h, r, q, gamma):
    m = (q - 1) // (2 * gamma)  # Step 1: Calculate m
    r1, r0 = decompose(r, q, gamma)      # Step 2: Decompose r

    # Step 3: Adjust based on hint
    if h == 1 and r0 > 0:
        return (r1 + 1) % m           # Step 3: Increment if hint is true and r0 > 0
    elif h == 1 and r0 <= 0:
        return (r1 - 1) % m           # Step 4: Decrement if hint is true and r0 <= 0
    else:
        return r1                              # Step 5: Return unmodified r1 if hint is false

# Example usage
if __name__ == "__main__":
    # Input values
    h = 1               # Hint
    r = 8904416         # Input value
    q = 8380417         # Modulus
    gamma = (q - 1) // 32   # Gamma value

    # print("Input values:")
    # print(f"h = {h}, r = {r}, q = {q}, gamma = {gamma}\n")

    # r1, r0 = decompose(r, q, gamma)
    # print("Decompose result:")
    # print(f"r1 = {r1}, r0 = {r0}\n")

    # result = use_hint(h, r, q, gamma)
    # print("UseHint result:")
    # print(f"Adjusted value = {result}")




def w1_encode(w1, q, gamma):
    w_tilde = []  # Initialize the encoded byte string
    max_value = (q - 1) // (2 * gamma) - 1  # Calculate maximum value for coefficients
    
    for i in range(8):
        packed_bytes = simple_bit_pack(w1[i], max_value)  # Pack each polynomial
        w_tilde.extend(packed_bytes)  # Concatenate to the output byte string
    
    return w_tilde

if __name__ == "__main__":
    w1 = [
        [9,9,6,14,12,4,2,5,14,8,3,10,13,6,0,11,14,3,5,11,9,5,6,8,9,12,3,2,1,10,10,10,6,14,13,7,8,7,2,14,5,15,5,13,6,7,11,12,6,1,9,13,8,5,9,15,6,2,12,14,7,5,13,13,7,9,12,15,14,9,12,6,3,8,5,1,2,1,7,5,10,12,6,12,14,14,1,8,10,7,4,8,5,5,0,0,12,4,8,2,9,9,2,6,13,10,8,7,3,10,13,1,4,5,8,8,15,5,9,3,10,1,11,9,6,4,12,0,5,8,9,11,12,5,11,2,13,4,13,10,10,9,12,7,13,9,1,7,2,13,15,0,7,0,7,9,14,6,9,5,7,1,14,5,7,8,10,14,9,8,3,0,0,13,15,9,6,2,10,6,0,9,0,6,11,10,12,11,3,12,1,14,6,14,10,9,10,11,8,1,9,2,10,4,13,2,5,7,4,15,11,2,2,0,9,6,15,4,8,1,4,1,8,3,5,0,5,9,2,13,13,7,13,2,1,15,15,14,7,12,0,8,12,15,6,3,11,6,11,7,5,1,10,0,7,5],  # Truncated for brevity
        [8,12,6,2,12,13,8,4,9,14,7,6,12,15,10,5,13,1,11,9,0,6,15,14,7,10,7,8,0,6,6,8,1,13,0,1,4,6,9,5,3,9,6,7,15,0,12,3,9,3,10,9,3,7,12,12,10,6,5,13,13,1,9,7,8,15,4,5,0,14,13,8,13,1,14,13,15,11,6,12,12,4,10,12,15,0,8,11,4,2,7,3,2,0,14,6,2,6,9,5,6,8,11,8,14,5,13,4,13,9,12,11,14,10,15,11,3,11,6,1,5,5,12,8,0,2,9,6,7,5,14,7,7,8,13,14,13,12,6,5,4,3,3,1,15,9,6,3,13,10,5,12,3,11,0,0,5,5,13,9,0,13,9,6,2,6,15,2,3,8,8,5,15,7,8,2,0,0,8,15,8,0,1,8,0,9,7,8,9,8,0,10,2,7,2,11,0,3,5,2,10,8,13,10,11,3,12,5,11,10,0,6,13,12,11,8,6,11,14,3,8,9,11,14,5,9,2,13,3,13,11,8,7,13,5,10,11,0,2,2,14,7,12,9,7,14,11,5,5,7,14,12,5,9,2,10],   # Add all coefficients from w1[1]
        [0,0,6,5,10,8,15,10,9,6,0,3,14,15,13,7,5,13,10,4,13,8,11,2,5,6,6,2,14,2,5,3,8,11,6,6,13,11,9,5,6,15,11,4,10,5,9,1,4,5,5,15,10,14,0,14,3,5,13,13,3,13,12,7,2,9,4,6,7,0,13,9,10,1,15,1,2,12,10,12,14,10,13,0,6,7,12,4,1,9,4,8,0,0,12,2,9,1,10,10,1,6,12,11,7,6,5,9,12,1,4,4,7,9,13,3,10,1,7,1,10,4,4,4,5,12,5,15,0,9,3,6,5,8,5,6,2,9,12,7,1,1,13,3,10,9,11,12,11,8,15,5,2,10,1,13,3,1,2,5,11,4,2,14,5,4,3,0,8,5,15,13,10,2,14,2,8,13,0,2,15,14,4,7,11,4,9,10,2,14,2,13,2,11,8,5,9,10,2,12,5,10,1,15,4,3,11,10,14,12,9,2,15,4,12,13,0,5,0,15,9,12,13,9,2,13,9,11,9,6,5,11,3,14,7,12,4,12,8,7,10,15,3,14,11,11,5,5,10,8,3,5,4,8,10,14],   # Add all coefficients from w1[2]
        [0,13,4,4,5,14,3,6,12,7,10,1,5,13,7,1,4,2,3,10,15,10,11,4,12,14,14,12,9,9,0,5,8,14,1,1,7,1,6,15,15,8,0,7,9,7,6,9,15,7,0,8,14,6,1,13,13,1,5,11,8,7,8,5,8,14,1,0,5,9,6,13,7,7,14,12,0,4,10,8,11,8,4,11,12,14,3,7,6,8,2,2,6,6,9,13,14,12,15,4,2,9,1,0,5,1,4,7,10,6,7,15,7,11,6,1,1,13,0,8,8,6,9,10,3,9,2,11,15,12,5,2,5,8,14,5,4,3,7,9,11,5,14,15,9,6,9,4,11,7,4,4,13,13,9,9,4,13,13,2,10,6,11,14,3,8,0,13,15,11,12,2,4,12,0,3,8,12,5,12,8,5,15,0,1,4,12,10,10,11,10,11,0,7,5,10,2,0,5,2,7,11,12,9,11,2,12,2,13,8,11,8,10,7,10,7,0,5,15,10,13,9,2,13,15,1,7,12,11,9,9,10,11,0,6,6,10,15,0,5,15,6,11,9,5,11,14,4,1,9,14,6,4,12,10,5],   # Add all coefficients from w1[3]
        [6,8,11,10,5,6,0,11,14,11,5,3,1,5,14,0,1,4,3,2,9,2,2,10,6,6,13,15,8,15,10,14,5,7,13,13,6,7,11,12,14,9,9,5,0,5,1,15,14,10,4,14,15,5,13,13,15,1,12,15,6,9,12,6,11,8,5,1,2,1,7,13,10,12,14,12,14,6,9,8,2,7,4,0,13,13,8,0,4,12,0,2,9,9,2,14,5,2,0,15,11,2,13,1,4,13,0,0,15,13,1,3,10,1,3,9,14,4,12,8,5,0,1,3,4,13,11,10,13,12,13,2,10,9,12,7,5,9,9,15,2,5,7,8,15,0,7,1,6,14,9,5,15,1,6,5,15,0,10,14,1,0,3,0,0,13,15,1,14,2,2,14,0,1,0,14,3,2,12,3,3,12,1,6,14,14,10,1,10,11,8,9,9,2,10,4,13,2,13,7,4,7,11,2,10,8,9,14,15,4,0,9,12,9,8,11,13,8,5,9,2,13,5,15,5,10,9,7,7,14,7,12,8,0,4,15,14,11,11,6,11,15,5,9,10,0,15,5,0,4,14,10,4,13,0,4],   # Add all coefficients from w1[4]
        [1,14,15,6,12,15,10,13,13,9,3,9,8,14,7,6,7,10,15,0,8,6,6,0,1,5,0,9,12,6,9,13,11,9,6,7,15,0,4,11,9,11,2,9,11,7,4,4,2,6,13,13,13,1,1,15,8,15,12,5,0,14,5,8,13,1,14,13,15,3,6,12,4,4,10,4,7,0,0,11,4,10,15,11,10,0,6,14,10,6,9,5,6,0,3,0,6,13,5,12,13,9,12,3,6,2,15,3,11,11,6,1,13,5,4,8,0,10,9,14,15,13,6,15,7,0,13,6,13,4,6,5,4,3,11,1,7,1,6,11,5,2,13,12,3,3,8,8,5,5,5,9,8,13,1,14,2,6,7,10,3,8,8,5,15,15,0,2,8,8,8,7,8,8,9,0,0,1,7,8,9,0,8,10,2,15,2,11,0,11,5,2,10,8,13,10,3,3,12,13,11,10,8,14,13,4,11,8,14,3,6,11,8,1,3,6,5,9,2,13,11,5,3,0,15,5,13,10,11,0,10,10,6,7,4,1,7,14,11,13,5,15,14,12,13,9,10,2,8,8,14,5,2,8,7,10],   # Add all coefficients from w1[5]
        [1,6,0,3,14,7,13,15,13,13,2,12,5,0,11,2,13,14,14,2,14,10,5,11,8,3,14,6,13,3,1,5,6,15,11,4,2,13,9,9,12,5,13,15,2,6,8,14,11,5,13,13,11,5,12,7,10,9,4,6,15,0,13,9,10,1,15,9,2,12,2,12,14,2,5,0,14,7,12,12,9,1,12,8,8,8,4,2,9,1,10,2,9,14,4,3,15,14,5,9,12,9,12,12,7,1,5,3,10,1,15,1,2,4,4,12,5,4,13,7,8,1,3,14,5,0,5,14,2,9,12,7,9,1,5,11,10,1,3,4,3,8,15,13,10,2,1,13,11,1,10,5,3,12,2,14,13,12,3,0,8,5,15,5,2,2,6,10,8,5,0,10,7,6,4,15,11,4,9,2,10,14,2,5,2,11,8,13,9,10,2,12,5,10,9,15,4,11,11,10,6,4,9,10,15,4,4,5,8,13,0,7,1,4,13,9,2,13,1,3,1,14,13,3,11,14,7,12,12,4,0,7,2,7,3,14,11,3,5,13,10,8,11,5,12,0,2,6,8,13,12,4,13,14,11,6],   # Add all coefficients from w1[6]
        [12,7,10,9,5,5,15,1,12,10,11,2,15,10,3,12,4,14,14,4,9,1,0,13,0,14,1,9,15,1,6,15,15,8,8,15,9,15,14,9,7,7,8,0,6,6,9,13,13,1,13,3,8,7,0,5,8,14,9,0,5,9,6,13,7,15,14,12,8,4,10,0,3,8,12,11,12,6,11,15,14,8,10,10,14,6,9,13,14,4,7,12,10,1,9,8,5,1,4,15,2,14,7,7,15,11,6,1,9,13,8,8,8,14,9,2,11,1,10,3,15,4,5,10,5,0,14,5,4,3,15,9,3,13,14,7,1,14,1,4,11,15,12,12,13,13,1,9,12,13,5,10,10,6,3,6,3,8,0,13,15,3,4,2,12,4,0,11,8,4,13,4,8,13,15,0,1,12,4,10,10,3,10,11,0,15,5,10,2,0,5,2,15,11,12,1,11,2,4,10,13,0,11,8,2,15,2,15,0,13,7,2,13,9,2,13,7,9,15,4,3,1,1,10,11,0,14,14,2,15,8,13,15,6,11,1,5,3,14,4,9,9,6,14,12,4,2,5,14,8,3,10,13,6,0,11]   # Add all coefficients from w1[7]
    ]

    q = 8380417     # Define q based on your context
    gamma = (q-1) / 32 # Define gamma based on your context
    encoded_bytes = w1_encode(w1, q, gamma)
    # Convert encoed bytes to hex string
    hex_string = ''.join(format(byte, '02x') for byte in encoded_bytes)
    # print("Encoded hex string:", hex_string)