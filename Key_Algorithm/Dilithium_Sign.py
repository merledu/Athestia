from Dilithium_Key import *


#---------------------------------------------------- PARAMETERS ----------------------------------------------------#
gamma_1 = 524288


#---------------------------------------------------- FUNCTIONS ----------------------------------------------------#
def BytesToBits(z):
    alpha = len(z) 
    y = [0] * (8 * alpha) 
    z_prime = list(z)
    
    for i in range(alpha):
        for j in range(8):
            y[8 * i + j] = z_prime[i] % 2
            z_prime[i] = z_prime[i] // 2
    return y


#---------------------------------------------------- STEP 1 ----------------------------------------------------#
#----------------------------------- FUNCTIONS -----------------------------------#
def BitUnpack(v, a, b):
    c = bitlen(a + b)
    z = BytesToBits(v)
    w = [] 

    for i in range(256):
        bits = z[i*c : (i+1)*c]
        w_i = b - BitsToInteger(bits, c) 
        w.append(w_i)
    return w


#----------------------------------- skDecode -----------------------------------#
def skDecode(sk, l=cols_l, k=rows_k, eta=eta, d=d):
    bit_offset = 0

    rho = sk[bit_offset:bit_offset + 32]
    bit_offset += 32

    K = sk[bit_offset:bit_offset + 32]
    bit_offset += 32

    tr = sk[bit_offset:bit_offset + 64]
    bit_offset += 64

    bitlen_eta = 32 * bitlen(2 * eta)
    y = []
    for i in range(l):
        y.append(sk[bit_offset:bit_offset + bitlen_eta])
        bit_offset += bitlen_eta

    z = []
    for i in range(k):
        z.append(sk[bit_offset:bit_offset + bitlen_eta])
        bit_offset += bitlen_eta

    w = []
    for i in range(k):
        w.append(sk[bit_offset:bit_offset + 32 * d])
        bit_offset += 32 * d

    s1 = []
    for i in range(l):
        s1.append(BitUnpack(y[i], eta, eta))

    s2 = []
    for i in range(k):
        s2.append(BitUnpack(z[i], eta, eta))

    t0 = []
    for i in range(k):
        t0.append(BitUnpack(w[i], ((2 ** (d - 1)) - 1), (2 ** (d-1))))

    return rho, K, tr, s1, s2, t0







# def H(input_data, output_length):
#     """Hash function H based on SHAKE256."""
#     shake = SHAKE256.new()
#     shake.update(input_data)
#     return shake.read(output_length)

# def ExpandMask(rho, mu, l):
#     """ExpandMask function based on NIST MLDSA Algorithm 34.
    
#     Args:
#         rho (bytes): Seed of length 64 bits (8 bytes).
#         mu (int): Nonnegative integer.
#         l (int): The length of output vector y.
#         gamma1 (int): Bound for polynomial coefficients, a power of 2.
    
#     Returns:
#         list: Vector y where each entry is a polynomial with coefficients in range -gamma1+1 to gamma1.
#     """
#     c = 1 + bitlen(gamma_1 - 1)
#     y = []

#     for r in range(l):
#         rho_prime = rho + IntegerToBytes(mu + r, 2)
#         v = H(rho_prime, 32 * c)
#         y_r = BitUnpack(v, gamma_1 - 1, gamma_1)
#         y.append(y_r)

#     return y


#---------------------------------------------------- MAIN FUNCTION ----------------------------------------------------#
def Sign(sk, M):
    random_no = 30
    # print(random_no)
    random_bytes = random_no.to_bytes((random_no.bit_length() + 7) // 8, byteorder='big')
    shake = SHAKE256.new()
    shake.update(random_bytes)
    rnd = shake.read(32)  #256 bits = 32 bytes

    # secure_random = random.StrongRandom()
    # seed_length = 32  
    # random_no = secure_random.getrandbits(seed_length * 8)   #32 * 8 = 256 bits
    # rnd = IntegerToBytes(random_no, seed_length)
    
    if rnd is None:
        return None
    
    M_prime = BytesToBits((IntegerToBytes(0, 1)) + bits_to_bytes(M))
    
    signature = Sign_internal(sk, M_prime, rnd)
    return signature


#---------------------------------------------------- Sign_internal ----------------------------------------------------#
def Sign_internal(sk, M_prime, rnd):
    #--------  Step 1: (ùúå, ùêæ, ùë°ùëü, ùê¨1, ùê¨2, ùê≠0) ‚Üê skDecode(ùë†ùëò)    
    rho, K, tr, s1, s2, t0 = skDecode(sk)
    # print(f"\nœÅ : {rho}")
    # print(f"\nK : {K}")
    # print(f"\ntr : {tr}")

    # print("Vector s1:")
    # for i in range(len(s1)):
    #     print(f"\ns1[{i}] = {s1[i]}")
    
    # print("Vector s2:")
    # for i in range(len(s2)):
    #     print(f"\ns2[{i}] = {s2[i]}")

    # for i in range(len(t0)):
    #     print(f"\nt0[{i}] = [{', '.join(map(str, t0[i]))}]")




    
    # # Step 2:
    # s1_ntt = []
    # for i in range(len(s1)):
    #     s1_ntt.append(NTT(s1[i]))
    
    # # Step 3: 
    # s2_ntt = []
    # for i in range(len(s2)):
    #     s1_ntt.append(NTT(s2[i]))
    
    # # Step 4:
    # t0_ntt = []
    # for i in range(len(t0)):
    #     s1_ntt.append(NTT(t0[i]))
    
    # # Step 5: 
    # A = ExpandA(rho)
    
    # # Step 6: 
    # mu_input = tr + bits_to_bytes(M_prime)
    # mu = H(mu_input, 64)
    
    # # Step 7:
    # rho_double_prime_input = K + rnd + mu
    # rho_double_prime = H(rho_double_prime_input, 64)
    
    # # Step 8: 
    # kappa = 0
    
    # # Step 9: 
    # z, h = None, None

    # Step 11:
    # y = ExpandMask(rho_double_prime, kappa, l=len(s1))
    # y_ntt = [NTT(poly) for poly in y]
    # Aw_pointwise = []
    # for i in range(len(A)):
    #     Aw_pointwise.append([(A[i][j] * y_ntt[i][j]) % q for j in range(256)])

    # #step 12:
    # w = [NTT_inverse(poly) for poly in Aw_pointwise]


    # return w



M_prime = [1,0,1] 

# rnd = b'\x01\x02\x03\x04\x05\x06\x07\x08' 

sk = b'm7\x8a\xd2\xe4z\x0c\x99n7\xd5,U\xcd\xa6{\xcc\xa6\xff\x8f\x1d,\xd6d9\xa8Sk\xb6\x84\xe2\x0f\xe3\x0f\x04\xb0\xa1\xa1E\x9fm\x97\x05K\xbbUx\x80\x144I\xb1\xcaP\xf5\x01\xe9\xe6)\'\xd5\x9d\xa73i\\U\xeb\x10i\x98\xa79f\x07\xe6\xd9s\xd3\xe9\xdd\x9d\xeeZ\x98yF|\x88\xc4)f\x12\xd0\x03:\x96V\xf1\xce\x19\x9bI~\x95\xcaS\xbbj;HL\xf6\xa7\x9b\x87f\x07&\xc0?h\xab\xf9\xa5\x89x\x9e\xe1\x84\r\x08\x06\x08\x9c\xa8\x8d#3f\x0b\xa7pY\x82h\xd0\x06\x89\x1c\x18\x92\xc48n@\x92\x01\x8b"a 51\x848\x92\x89H@\x187\x0c`\xa0\x01\x1a\xc5@\x00\xa3\x10\x02\xa0)\x12\xc1i#\x00B\xd1\x92`B\x18\x06A\x16b\x0cE1\x19IB\x822\x8eHD\x82 \xb8\x10\x04\x89A\x0b\x96\x11\x0b\xa9\x0cX\xc0mP\x840\x1a&A@\xb6\r\xdb \x12\xe4\x96\x88\x13GR\x11\x12\x01\x91@"\x187b\x13D\r\xe2\xb2`\x03\x05\x86D\xb0a\xc46\x81\x08\x06\x85\x1c\x05\x8e\x94$\x10!\t0\x89\x82\x85\xa3&\x0e\xc1\x92@J\xb8M\x8a\x10\x12"1b\x11% \xda0.\x94\x88(K\x00qJDh\x01E2\xe3\x04\x86\x84\x06!\x94\x18\x06\x13\x00n$B\x91\xa3F\x86\x82\x12\x0e\x1b)*\xcc\x12 $B\x01d\xb2`\x012*\x81\x00\x85\x11\x04\x02\x8c@$\xe1@0R\x98\x90\xa4\xc2\t\xda\xa01\x94\xb80\xc2\x12$J\x80l\x830\x11\x184f\xcb\x80M\x137\ta(p\x1a\x01*\x18"\x90\x1b\xb6e$I\x10\xe0\x88\x10\x01\x94M\xc1@\x8a\x10\x81@\x1c\x00\x8e\x80\x06\x84\x88\x90l\xe4\x16.\x924\t\x9a\x98\x00\x18\xa4I\x8c@i\x94\x94\x01#!P\xd22\n\\\x14\n\x19\x00\x06\x1c\xc6l\x04%"\x91Fa\xd8\xa2dY\x84\t\x14\xc5`\x191\x11\x99&JZ (\x90\x00!\xd9\x16B\x92Dq\xd4\xb8\x04b\xa81$\x87EY6DCD*\xd2\x92M$\xb7-"\x02\x8aS\x90\x81\x19\x11\x01\x1951L\xb6D\xdb\x92\x88$"\x06\xd14m\x93\xa0\x08\x94FB\x1a&p\x93&\x0e\x83$\x8e\xc0\x10(\x01\x01.#\x85@\x18\x07`\x13\x12\x8e\x14Hj\x90\x86(\x81\x901\x84\x16"D\x94)\x12Gq!\tj\x9c\xa4\x00PBm $R\x99D\x0c\x9b\xc20\xc8\xc2q\x94\xc6\x89\x18(H\x13\x07\x85J$l$\x19\x90A@Q\x19$&\x01\xa4-\x11\xa2\t`\x060\xd2\x96\x00\x0c\xa0$\x1b\xb6-$"\x81\x9b\xb0D\x14G\x05!\x00(\x8a\xc0(K\x94A\xa14\x08\x8a6*\x11\xb5\x8db\x00(\xcc \x8d\xc20j\xa3H\x06\xdb\x901\n8\x85\xcc\xb6\x04J\xc4\x11\x14\x12A\x01F!\x1c\xa4E\xc48A\x10\x07B[H\x88L\x10\x8dR\xb4e\x92\x12H\n\x12\x92\n!dD&\x85B\x041\x0b\x16QQ\xc0\x81\n%\x90P\x10\x05\xe0\x86a!\x11ba2\x06I \x81\x1421\x029f\t `\xc9\x00\x11K\x08\x11\x11\xa0\x88\x914 \xe4Fe\xc0H.\xc9\x88\x11\x83\x82\x01b\xb0$\x80\x86\x10\x11\x96\t`\x88M`\xb2m\x1a\x19QP8,\x84\x14\tA2p#\x06Q\x01)\x10$\xc7\x8d\x92@\x08\xc9\x98\x84\xd8FA\xd1\xa0M\x0c\x08m\x93\xa4 \x0c\xb6\x91\t"2\x98\x86q\x8c\x96Q\x19\x04nK\x04"\x81 N\x10(0\x00\x92I\xa24NC\x08B\x01\x13j\x0cE!\xc4&i\x00\x93A\x0c\'\x12\xe36\x8a\x19\x17\x12\x98\x94%\x14%L\xcc\xc4,\x92\x14\x12\x1a\xa5e\xdaH\rI\xb4\x8d\xc2\x90e\xc9\x86\x10\x8b"qT\xb2a\x93\x92\x81\x02\x14RJ\x18\x01\\\xb2L\xc0\x881"A\x91\xd88\x84\x81\xa2d\x00$d\x02\x08\x01"6a\x12\'\x90\\BE\x19\x02\x88\xe1\xb2`\x1c\xc1\t\xc9(\n\xa0\xb0\x85A\xb0p\x1c\x11j\x01\x18\x8d\x04H\x05\x0321\nDe\x18\x12$Y\x04\x89\x10\x90A\x12\x11\x82aD\x0e\xa0H\x88\x9c@%\x14\xa4$ \x84eD$\x01\x1b\xc6!\x994m\x00\xc81\xa46\x82\xe2\x84m\x89@\x85\xd92*\xe2\x12\x08\xd1\xa4M\x1b\x07\x91\x12\xb3H\xa4\xb2\x8c\xe2@\x91\x18\t@\x04\x15RY\x84\x11\x1b\xb2\x89\x1c\x84\x00\xe0\xc2L\x08\x19%$#&\xe40N#\xc5\x89$\x84H\xc4\x16\x02\x90\xc0\x01\x99\xa2hX\x16\x89\x82\x02\x85\x08\x15)b\x96%\x99\x821\xe4\x92\x8c\x9c\x06R\xa2\x06\x08#\x17a\x1b\x86\x05c\xc4A\x00\xb6$[F\x81\x98@!\x03\x16b!F%\xa4Bn \x18\x84\xc4\x161\x12\x90p\xe2\x00M#HF\x99\x08\x8e\xe2F\x82HF@\x01C`\xd0\xb0\x89\x9cH\r\xe36\x8ca\x18N\xd4\xc8mK\x06J\x01\xc7(\x03\xc9\x10 \xc9\x0c$\x88\x8c\x01%$\xd14,\x04\')\x123&\x08\x10D\x94\xb0H\x82\x02M\xe4\xa0,\x928\r\xc10f!\xb0\x85S\x960\xe12Q\t8\x90\x1bCl\x11BP\x18\x13P\x08)\x01\x18\xb0\x85\x92\x94%a\x90L\xd0\x08\x84\x044q\x0c\xc5l\xe4\xc4e\xdb\xb4\x01J$\x04\x12\xb5M`@\x11\xa4\x06\x91\x00\x89h\x12\x11I!\xa2\t#\x83 \xdc$\x80 \xa4\t\xcc\x94\x90K4I\x123b\xe1\x98QQ\xb6E\xa3@\x12\x0bF\x00\x123j\x1b\xb3\x0c\x83\x04 C\xc0M$D*$D2\x90\x00\x0ed"h\xcb\xa4%\x02F%R\xc4\x04\x92\x06\x00D\xb8M\x0c\xc4\x0c\xa1\x82\x10\xa0\x86A\x005\x89\x824\x80\x84@*\x82\x102@"\n\x98\xc0(\x12E\x80\x1c\x00\x0c\x99\x86\x04L\x12!\x19\x82p\xd0\xa6$\xc1\x04L\xc0BR\xe0\x84,\xa34!\x18\x97E\x1bBN\xa3\x82\x08\x9c\xa4\x88\xd0\x08\x85\x1a2B\t\xa8,P\x02a\xa08J[\x82m\tEh\xdc\xb8e\xd8\x90\x01\xdb\x94`\\\x18\ra\xb4!\xd9\xa2a\x8cF\x02\x10\xb1d\x02&(\x0c"\x0e\xe3\x14(\x84$B!\xa3!\t\x12\x81P\x04\x84\xa0\xb4\r \x05\x8d\n\xc7\x08\x9a20\x0c8&\x03\x00E\x93$-\xe0@P\x91FA\x08@q\x010\x82\x13\xa9m5PN|\xbc.&[p\x13\x1f||xmPY,\x04k2\xd95\x04\xdbcT\xec\xec\xbdy\xa0_\xc0BC\xe8\x01HQi\xa1m\xc8Y\xcb\x01\xb3s\x0f\x8fe\xfc(\xe5\x90\xd7<y\x0c\xf7\xc1\x8be\xf3\xac\xb1\xa5\x071\xecU\x056\x13\x85\x1e"\xae=0|\x82\xa3\xa2\xcc\x1a\xe8\xeb\x13\x07\x16\xdbo\x19\x1eB\xb7%\xc3\xc4\x17%\xfc\xdb\xa5\x10\r\x85F\xeeM\xd6\xfe,\xd0\xe0m]\xd6H\xc7\xa4;gWq\xff\xebJ\x15\xd2\x1b\n\xaf\xf4\xe2\'\xcb\xccZ$\x9e\xcfF\xde\xc3\x96\xfeF4\x19MC\xe55f1\xb7B\x16\xb5\xeb\xf9v[~\x8bQ\x12\xc2\x8e\xc1_\xab;\xc4\xc15\xbc\xcc\x1d1_-x=\xa1T\x10\xaaWg\xaa\xc4\x1f\xcce\x0b\xed\xe3==+\x9e\x95)\xe4RX\x1d\xc0]\xa0\xb2P/2\xb6\xb3c\xb0\xfa\x89\x88\x90\x91\x07\\\xc6\xc4uO\x9b!\xa8\xcd\xb4s\xfa\x84V\x8fGw\xef\xfc\xd0\xe7^\x1e\xe8#\x9b\xcd\x19\x02-\x82\x10\x01\xfc\x0c\xa7\x9bW%\xa4eo\xaf~\xf16<m\xf9\xdf\x9c\xa8S\xceU\xe2Ew\xf7\x9d\xe7\x18O\xa7\\\x85r\x9d\x81\xbd\xa0>q\xed\xd1a\x13\xdc9\xaf\xfb\xf8\xa8\x8a2\x92Eu\xde9\xaf\x05Ls\xf6\x14\xb1\x92\x9a\xe4\xb2\xbcnn\xfa\xff[cK\xa3\x8f\x16\xe5:\x06\xa3D\xba\xe49\xcc\xac:\xa8\xd7\xf5\xf3\x0e1\x93\xe7Qz\x8fs\xa6\xec\x80\xa2\xebq2}\x8a\xd9$.s\xden\x84XQ2c\xb5\xde\x9f\x915\x9c\xb9\xbd\xed\xdf\x7f\xf7\xfc\x1a\xef\xe8\x969N\x94\xaa\xb9&}SM\xd7\xf9\x8e\xe7\xb4\xed\xebL\xa6\xb20\xa4\xc6\xddH\xabI,Mt\xac\xa4\xa1\x8e\x8fG\x18;\x01B3GT\x120\xd5?P\xbf{\xe8{{y\\\xa55.l\xa1%\xfb\xca`K&\x92O\x10\xbf\xd6\x9b1TgwO\xad\xeb\x84h"\xe0\xb6\xa3\xb4|-R\xbfO\xd6\x1a\xf9\x1dQ\x98-\x13@\'\x98t\x93\x8f\xb6\r\xed.\x89\xb8>,G\xc3\x8f\xf5\xcc:(zG\x08\x1a\x03\x1c\xab$\xf3\xbeH?\xcb\xcf\xa4\xe6\xe7r\x02\xc8\xbc\x9a\xe1\x80h\xa3\xe2T7\xd8\xc0\x7fWwe\x12^\xbayC(\xa7\xe54\x0c\x90\x18\x98\x87\x7f\xea\xfcv\x99\x04\xc4\x9a\x0eP\xa9\'\x88\xda\x8fm\x03\xc3h\x91\xef\xc4\x91\x1557\x86\x08j\xf7\xc2\xc9\xb5Q\xcf\xa9\xc1\xaf\x9dE9\x1b\xda\xc8\xee\x1cX\xb5\xa7\xda\x08\xf4\xa3\xa4(1a\x18\xdc7\xa9\xa8\x14\xee\x97\xd6\x9c\xe3\xf25\x9cbb\xa0\xb5\x9b\x17#[\xfd/\t.\x12z\xf4&\x99\xb8\xce\xc2#\xfa\x9d\x0e]7M\xa6~\xe4\x1a\xfaQ\x8f"\xd2\x1c\xbc*\xd2\xf5k#\x19\xbb!\xe7%Fs4\x88\xdcW\x81.f\xc6r\x1e\xe2\xb4x\xa0\x87\x9a6\x8aY\x8d\xb0\x07J\xc8\x8b\r\xaa\x7f\x8d\xb2|\xe7C\xee\xe9\x18~\xbb\xe4\x0f\x85Y\xd3\xa1<\x1eO\x8dp\xde\xa1 w`W\x9bG\xd0\x00\x8e\x19#\xb0qV\xf3\xb4\x1fP\x1aI\x02\xc0\x04\x1fa\x97\xdf\x9b;\xb5\xe5\xe3\xdb|t\x08\x00\xa2\xad\x05\x1c]\xdd}\xff\xe1D\x07\xd3|j\x93lC\xe1l\xa4\x05\x83\xba)IPUBr\xeb~{\xf5\xd6\xac\xa3\x97|\xb903\x13\xf6BexR\t\x07\xd6\xeeV#\x9c\xdb:\xd8% \xbb_\xe7;\x1d\xb2cJR;6d\xe3 \xa6\xb1I\xed^h\x8e!;\'\xf3\xaan\xdc\xbf\xf67\x02^\xc69):\x117\n\xec3!|i\xd8>\xd7Z*\xe7\x99q\xd8\xb2\xd5n\xdb\x1c[\xab\xa0+\xdd\x1c|\xe8;\x19kx\xfcd[\'F_\x05^\x91\x80l\x82\xfb\xda\xb4\x1d\t[\xa8G\xfc,\x17%5r\xac{\xe3\xdf\xdb\xce\x8c\xe5\x82\xb5[\xa17\xcc\x8a\x14\xb0L\xd6\x1eS\rcb\x1d\xdc\x88\xb4F\x9bU\xf0/\x11\x931\x10\xba\x9c\xb6E\xd67e\x82\xa5\xbb\x8bq.\xc0\xf0\xba\xec(\x08\xaa\xe2\x8c\x9a\r\xf2+\xa9Jf\xea\xeb\xe6\xb4f\xc8\x0e*y\x9d\xc0#\xc46z\xbc\xca\xb0\xf4X\xc2\xac\x94\xa7\x04\xc1\x8f\xc6\x99 \xc6\x9e\xb88\xac\xc1\xb7\x03\xf2H>s\xa5I\xd4[9\xf5\xb4fL\xf5thT\x15\xc7ax\xa2\xd0\x90\xbe\x8ev\x9c\xa0\xcfK\x1f\xa2@+H.\x82pT\x1cg\xf1\x1a\xf8\xbf\x98\x8el\x8fFY\x0f\xa3\xd3\xda!M\xfbqp\xce\xed\xcbDd\x8b\x8d\xc6~[$/\xb45\xc9t/\xf6\xc4\xb8~M\x1b9\xa1$J\xc0\xa0M\xc5Y\xf5\xd1\x1d\xc7\xc5\xb9\xf3\xc3\xa3\x12{7\x0602\x17m\x7f\xaf\x8c/\xe6\xd9\xcb6/\xdd\xf6`X\xe4\x0c\xa2\xb6\xcf\xbe\xecT\xe6g\xcb8\xd8\xa4\xf2\xe9)\xa5L\x1a\xbbc\xd6\xc668\x1f\x1b}\x88\x0cb\xcb\xd8\xc0\xa7\x96\xca\xfe\xf4\xc5Ut\x17,`\x12k&\xca\x8385\x07D\x1f\xe67\xca[7\xe1\x92\x00.\xab\xc5\x08\xbb\x97\xe4$\x88\xf9b\xba\xe9\xeb\x08\x1d\xea\xbfw\xdd\x890\xd1\xb8"\xb9R\xb0\x1e\xdfj\xfd\x9c\xa4\xb0)\x07\xe7d\xb3T\x13\x82S\xcb\x83\xeaqas\xddgY\xa2-7Y\x07\x8e\xe2]Q\x816\x8eh\x8b3\x9eg\x80U\xa7\x08\x8e_J\xa2\xe3\x96\xfb\xa2\x8b\xa0\xac\xbb\x1c\xdbx\xd4LW\xa3"S\xfa\xce!`ZR\xf8E\x99\xe3\xcbM?\x084\xc7 \xaf\xa3[z\xf2\xe6G\x87\x9b\xab\xe0\x92\xd9\x03\xd5/\xde\x89\xaa\xf9\xcd\xd4\xc6\xdc\xe9\xca\x8d4O\x7f=]4\xb42\x9b\xf1\xe1\xc3\x18\xaa\xb4\xbfV)*\xa1\x8aJ2sZ0\x0fV\x9a4\xf6?\xff\xb9:\x85_\xb9z\xe0`\xa8\x1fI\x81u\xbf\r\xf4\xb3\x0e\xd3j!|\x1a\x1c\x8bj\xea\xc9\xcb\xf1\xdc\x1a\x8e\x99\xf6\x9a]<\x86W\xe2\xa92y\x9f\x8fF3\xd9\x0f\xf9\t\xd8\xd8\xefY`d\xdfY\xcbQ\x82\xba\xa9\x066\xe9\xfe\xd0v\x81oW\x86\xe9o\x02=\xdf}\x89\xf4\x9ap\x11\x95\x08\x1d\xfa\x08:\x04\xc8\x1a\xb4\t\xbe\xe6a\xcb\x1b\xc5vJL\n\x14\x8a\x87\x8f\xe8P\xe0\x8e\x9b\x89\xb4\xa4Y\xc3-vG-\xb6\xfaD\x8568\x98\xfa\xa5\xf8\xf7v{&\x97\x12\x10\xbc\xa5i\xd6\xb9\xfd\x9b\x1c\xa24\x10\xfe\x9aC\x1e\xd3:\x9f\x88iG\'\x9d\xdcMv\xd75]\x01Qm\x04\xb2\xa2\xdd\xab\xa2>.\x18\xd9)\x0c\x92P&y\xcd\x05\x97\xca\xcd\xa7/\xd6\xea\xf0\xf1\xf4\x87\x9b\xe9\x83\xc5\xe3mPf\xff\xb4\xe7\x86\xd8\xfa6_\x0f\xeadn\xa5,K\xb4y\x97\x94$\xc81\xab\xfc\xf7!\x82,\x91\xb72\xa4\xc4=^fW \xa4\x94\xe2\xf4K\xc4\xaan\xc7\xc9`\x0c\x80*\xe1\x05\xad1\xb26A=\x9b.l\xce\x93\x073\xc5\x80\x12\x91\xd0\xd4z\xef\xbc;s\x8d\ts\x9cKt\xfeIh\x9c\xae6\xc6O\xffo\x80\xe6\x82}\xbd\xc1\xe5\\\xa17z\xe6]vT/\xb0\x05\xd8\xa1)\x1f\xf3\x05\\y\x0e\xce\x87\xf7\x82\xc9\xbf\xbcs\x9f\x94`\x9f\xb7\xd0\x8fi\x06\xc0\xca\x10H5[\xa2\xd6t\xfa\x0f\xca\xd1\xf5\xaa\xea,\x1a\xe8\xabV\xa1D\xcc\x10\xe8\xf5\xbd\xe8\x92m=u\xd0\x0f\x1f\x03\x17\xdb"d\x07M\xadr\xdf\xa9\xac\x88\x17\r\'9\xfap\xc8a\xd6\x86m\t\x9c\xcb\x80>\xa2\xf1q\x95a.c\x05\x1e\xfeR\xe8\x02\x93\x87\x846\xb1\xe6\x08\xa3(\x99\x8eL9\x8ew^,\xee(\x07\x82\xbc\xff\x88\x8bafN\x07\xb2\xb2\x17\xd3\x0ej%E\xd8\xb5\xe7\xc2\xf1..\xad\xa2\xa2\x04\x18z)\x0c8\x1eh\x93\x07P\xb4\xbaY\xfe\x96\x17\x19\x0b\xd9\xfek`\xe6b*\xb3\x1a\xc2V\'\x87T\xd8{C\xfa\x08\xa9\x92\xac\x99\xbe_mz\xe0M+\xca\x9c\xcb)\x07\x1fs)\xd4\xc3\x00\xe5\x87\x16f\xc6\xcb\te\xdf\xec\'<\xc3i\x84\xb7\xc8\xe6\xaf\xf9\x1a\xdd\xa5\xd6qeRS\xd5\xc6#\xbbC\xf3\x9b\xb5\x1b|\xbb\x06y\x8d\xdb\xd32\xc5\x96P\xde\x02\x98;\xc3\xc5@\x83OYN\x1aX\xa05\x0e\xca\xb7\xcd\x85;d\xf5\x013+\xc7\x86\xe7#}\xf3\xd2\xfc\x89\xfd\x002mP\xa8\xbb\xce\xf5[\x11\x100\xa0\xd4+\xd8G\xc0\xec\xcc\xf7\xcb\xfa\xb6\xaf\x8eL\xfb\xecg\x08j\n\xb5\xe2\xefA\x93\x96\xe2\x9fn\xe7%\x1ec\xa5\xe8\xb2\xa6\xdb\xd8\xd9N\xf2uY\x14\xdd\xf6\xd7{\xfdxW\xb8e\x0c\x89H\'tte\xfa\x1f\xfcr2\x9b+\x99^U\x03ij-\xf1\xe4\xaa\xa3Nu\xb4\xd8\xe4\\F\x8c\xc4\xf9[\xb4\x1c#\x84<\xb3X\x03\xc3U\xef\xf5\xaf\x8f\x9b2\x1cN\x02\x90e3\xd2(\xce\x97c\xc6[\xe5\x15a\xe91\r%\xb8\xdczizQS:\x9b\x89\x0fB,\x02\x12\xb1\x94\xe7%~\xd3 \x1fQ\xc9\xe0=+\x121\x81q\xab\xfbJI!\n\xd0\xb2\xef\xf0\xbdI\x1e\r\xc5\x08\xa6]\x87\x86\t\xea\x14-\x83c>\xab\xe7\xfd\xc4o9\xf4\x9d\xeed\x1cY;\xfa\xd4"\x89+\xe5\xbe\xbc_0\xa8\xb8\xfb\xb4!<U\xe0\xd7Q\x0c\xb2\xd1wJ\x83)]E\xe7\xd5\x9dN\x86-\xb0\xbe\x19S\xb0\x84_\xa6\x80\xf5P% \x91\xc6\xca\n\x83"m\xbc\x03\x98\xc1\x1fL,\xe2\xa8f\x08\x8da\xf6@\x1e\xbfs\xdf\xeb\xeee\xd3\xea[\xbc\xb1E:\xf5B\xc6f\xdck\xedZ\x8e\\\xdbsb|\xb0b+\x87\x93\xefJ>\xdfJ9;\x98yG\xf4\xbbo#(\xfc\xc8H\x81k \x99\x9b\xcaB\x89\xd0\xf6\x9e:\x11\x81Hx\xa5b\x9f\xda#\xcaV\x17X\x16\xf10\xfe\x86\xdf\x9d\x92\xaa\xa9\xaa\xee\xabW\'[\x07\xd6\x18\x8e(\x95]\x887\xc4\ru\xf5)\xf6\xe4\xfbF\x1d\xa0\xadkJZ\xf3\xb5\x81\x10o\x93!+\xef \xc2\xf1\x8fyp1\xd1\x82\xbf\xd2\x05X\x90\xd8p\xf2OJ-\x1c\xb6^M\x14\xcf\xceC\x11Y5\xea\xaa\xacv\xc2$\xd9\x9c;\xb90\x05\xfc\xc1#\x10\xa9\x1fVXrv\xff\xb9\x97\x89v\x82\xe1H\xd3\x92I\t@4B\\T\xd0l\xa2\x81\xbaX\xfal\x08N`xt\x16L\xb7\xc7:\x99\xcb\xde\xa1\x98\xd6\xc9X\x1dsp\xe5&\xfc\xe9[\xbb\x08\xa88\xa8\xeb\x9a\xe8\x80\xf3!\xc2\xd7\xe6a\x1b\xa8\xcc\xb5\t\xa5\x11\x8d">\xf0\x8d\x11\xed\x8eY\xbeRRU\x01\x17\x82\x87+\x7f?]\xc2\xa1a\xda\x81\x8c=Dp>}}\xedM\xf1\x93:\\~\x18\xdc E\x9aO\x06\xf8\xfb[\x17\xa1\xbb\x81?k\tq#E\xa9\xd4\x04<E5)\xa8\xbd\xdf\xe6=\xc4\x06\xae\x0eY]\x17\x1d,\x9c\xfb\xcfyK\x8am\xeb/`\xac\x18}+D\xcb\x8f\xea\xf8b`q\xe8^\xf8!\xbf\xe9$?\xd7\xb0\x9d=\xc9q\x19A\xe5\xdd\xc8\xa6\xb3\xf4\xf5\xa3\xae=\x99\x98\xca\xf6\xa5\xefJ\xae\xee\xf3~\xdf\xb0C\xe3\xb4-\x1d\x99\xdc\xc1\xd1\x86\x93\xe3\x9f\x8e\x1cP\xfcja\x9d\xab\x80\x02 \xcfg\x92\xfb}6\xa9\xd3\xf0;\x13X\xc75-Y]\xba\x0e8<\xcd\x8b\xc07\xe8\xfa\x80\xba1\xce\xa1\xae\xb6\xd9\xb7\xbbL\xbe\x90gZ3\r\x84\xf5J\xbe\x1dwG-V\x0e\xaaeENo \xbd(\xe9s\x9dp\x1b\x9b\xcfm>\xf1%\x16\x95g\x1b[\x07\xa6\xf9\xda\x91\x82[d\xf6t\xc6\xbf\x97B\xd6\xfah\xcd\xack\x1e\xd7?\xb6w@\xa3h\x90/\xe9\xb7y\xb0H\xd5j\x15R\xb4B\xb8\xd4\xdcr\xe7m\x81F7\x16\xd3\xac\xbd\x04\xe8\x8c\xd8\xdf\x11\x90\xcb\x8c\x0b\xe9\xcb\x8f\xf1\xc7g\x1bh\xc3-I\x1dk\x7f\xe1\x92Jar\x15\xfd\xc2\xb6\x9b\xc5\xb9\xf3\x98K]\x96\x07e\x14\x9a;\xa1\xc3b#\x9b\xe0-L\xeb\x9f\xb59\x9a\x03\xf3\n\xce\xeai\xb0\x1a\xf7S\xf5\xa9\xf0\x98|\xfe\xfd\xdeR\xd0\x9c\xa2G\x9b"v\xd7\x1f\xd3s\xbe\x86\x87\xc4u\xf50\x89lk\x83i0\x985A\xde\xcf:\x8e\xd0A\xda\xd5\xbf\x02xs\x15\x05vN\x13\xfdf\x97\x96dO7\x80E2\x04\xc6\xfaY\x8b\xeb\x15\x06\xe5`\xf2\x87\xf1\xf4W\xf5\x19\xfe\xea\xc8\xa4\x9dQ\xd9\x8b{\x8en\r\x93o[;\xde\xf7;\x8c\x048bar/p\x89\xd3_\xf7\xcc\xfa\\\xc1,\x10g\xae\x15\x80?\xcd\x95GE\x94L\xef`\xae?7\xc3\xc7N\xb1\xff\x11\x0c\x8a\xe3*$\xd2:m\x1d\xdc=~\x97\xb0\xee\xe9\xd6\xc2\x0c\xa3\x97\xf4q\x91\x85U\xe5\x15>\x11\xdc\xb4\x13\xe8\xa4\xa2\x13\xaaIy\xfd\xc9\xe4)\xe9\x8f\xe8@>jYb\xc5\xd3?\x8f\xfd\x18\xdc\xc6\xe5\xf5\xcb09\x93\xa6\x05\x8dj\xa5\x86\xa5\x1bgm\x1b\xd9\x9d\xd9o2U\x9e\xce\xf3\\\xeb\x06\xd1\'\xaa\x9b\n\xed\xe6\xf0\xbfs+\xbe~\xe8n\xa4\x08\xe0o\xa5\xbc\x0f\xf8\xb1(\x8bUw\xf3\x12^\xfe\xcd\xd9\xdd\x8d\xed\xcd\xd8\x97\x90\x95\x94Q\xc7{^\xfb\x1crS\x13\xf7\xc1\xe2<\xdfs6#t\x95\xdd$\xa8p\xeb\t\r\xce.hX\xa3\xae}\x1b@\x88\x1f\xf0\xd2\x90\x05,\xab\xbcK\xeb\x93!o\xf1\x15\xec\x13s\xa7#7\x7f\xf1\x846\xe6\x031\x98\xee\x9a\x11\x86\x1bs\xd7\xaf\xe6\xea\xc5r\xc2\xdej\\n\xe0\xdd\x02O~\xeb~\xcb\x83\xa0\x8e\x84<\x7f\x0e\x07sha\xfb\xa7\xbb\xeb]f\x0e\xcc\xed\x1c\xbd\xa4\x02\xc9\x8aod\x03B\xfe\x9fB\xc0\x153\xb1A\xf3\x8f|\xd1d"3\xb9\xe5q\tRV;\xa1\xa1'

Sign(sk, M_prime)
# signature_result = ML_DSA_Sign_internal(sk, M_prime, rnd)
# print(signature_result)

