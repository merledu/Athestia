from key import *
from sign import *


#---------------------------------------------------- STEP 1 ----------------------------------------------------#
#----------------------------------- FUNCTIONS -----------------------------------#
def SimpleBitUnpack(v, b):
    c = bitlen(b)
    z = BytesToBits(v)
    w = [] 

    for i in range(256):
        bits = z[i*c : (i+1)*c]
        w_i = BitsToInteger(bits, c) 
        w.append(w_i)
    return w


#----------------------------------- pkDecode -----------------------------------#
def pkDecode(pk):
    rho = pk[:32]
    t1 = []
    y = bitlen(q - 1)
    b = (2 ** (y - d)) - 1

    poly_size = (len(pk) - 32) // 8  
    for i in range(8):
        start = 32 + i * poly_size
        end = start + poly_size
        t1_i = SimpleBitUnpack(pk[start:end], b)  
        t1.append(t1_i)
    return rho, t1



#---------------------------------------------------- STEP 2 ----------------------------------------------------#
#----------------------------------- FUNCTIONS -----------------------------------#
def HintBitUnpack(y):
    # print(''.join(reversed([a[i:i+2] for i in range(0, len(a), 2)])))

    h = [[0]*256 for _ in range(8)]  
    Index = 0  
    First = 0  

    for i in range(8):
        if y[omega + i] < Index or y[omega + i] > omega:  
            return None  
        First = Index
        while Index < y[omega + i]:
            if Index > First:
                if y[Index - 1] >= y[Index]: 
                    return None
            h[i][y[Index]] = 1
            Index += 1

    for i in range(Index, omega):
        if y[i] != 0:
            return None

    return h



#----------------------------------- sigDecode -----------------------------------#
def sigDecode(sigma):
    # print(len(sigma))
    bl = 32 * (1 + int(gamma1 - 1).bit_length())  # block length for z elements
    cl = Lambda // 4  
    # print(cl)
    
    c_tilde = sigma[:cl]
    offset = cl

    z = []
    for i in range(cols_l):
        
        xi = sigma[offset: offset + bl]
        # if (i == 0):
        #     print(xi.hex())
        z.append(BitUnpack(xi, gamma1 - 1, gamma1))  
        offset += bl

    y = sigma[offset: offset + omega + rows_k]  
    h = HintBitUnpack(y)  
    # print(h)
    # print(h)

    return c_tilde, z, h



#---------------------------------------------------- STEP 9 ----------------------------------------------------#
#----------------------------------- compute_w_approx -----------------------------------#
def compute_w_approx(A, z, v_c, t1):
    z_ntt = []
    for i in range(len(z)):
        z_ntt.append(NTT(z[i]))
    # for i in range(len(z_ntt)):
    #     print(f"\nz_ntt[{i}] = {z_ntt[i]}")

    v_c_ntt = NTT(v_c)
    # print(f"\nv_c_ntt = {v_c_ntt}")

    t1_ntt = []
    for t1_i in t1:
        scaled_t1_i = []
        for coeff in t1_i:
            scaled_coeff = coeff * (2**d)  
            scaled_t1_i.append(scaled_coeff) 
        transformed_poly = NTT(scaled_t1_i)  
        t1_ntt.append(transformed_poly)
    # for i in range(len(t1_ntt)):
    #     print(f"\nt1_ntt[{i}] = {t1_ntt[i]}")
    
    Az_mul = []
    for _ in range(rows_k):
        vector = [0] * coefficients_per_polynomial
        Az_mul.append(vector)

    for i in range(len(A)):  
        for j in range(len(z_ntt)): 
            for k in range(256): 
                Az_mul[i][k] = (Az_mul[i][k] + (A[i][j][k] * z_ntt[j][k]) % q) % q

    # for i in range(rows_k):            
    #     print(f"\nAz_mul[{i}] = {', '.join(map(str, Az_mul[i]))}")


    c_t1_products = [[0] * 256 for _ in range(len(t1_ntt))]
    for i in range(len(t1_ntt)):
        for k in range(256):
            c_t1_products[i][k] = (v_c_ntt[k] * t1_ntt[i][k]) % q

    # for i in range(len(c_t1_products)):
    #     print(f"\nc_t1_products[{i}] = {c_t1_products[i]}")


    w_approx = []
    for i in range(len(t1)):
        final_poly = [(Az_mul[i][k] - c_t1_products[i][k]) % q for k in range(256)]
        w_approx.append(NTT_inverse(final_poly))

    return w_approx



#---------------------------------------------------- STEP 10 & 11 ----------------------------------------------------#
#----------------------------------- use_hint -----------------------------------#
def use_hint(h, r):
    m = (q - 1) // (2*gamma2)
    r1v = []
    for i in range(256):
        r1, r0 = Decompose(r[i])
        if h[i] == 1 and r0 > 0:
            r1 = (r1 + 1) % m
        if h[i] == 1 and r0 <= 0:
            r1 = (r1 - 1) % m
        r1v += [ r1 ]
    return r1v



#---------------------------------------------------- MAIN FUNCTION ----------------------------------------------------#
def Verify(pk, M, sign, ctx):
    if len(ctx) > 255:
        return False  

    M_prime = (IntegerToBytes(0, 1)) + (IntegerToBytes(len(ctx), 1)) + ctx + M

    # print(pk.hex())
    # print()
    # print(M_prime.hex())
    # print()
    # print(sign.hex())

    return Verify_internal(pk, M_prime, sign)  



#---------------------------------------------------- Verify_internal ----------------------------------------------------#
def Verify_internal(pk, M_prime, sign):
    # #--------  Step 1:
    rho, t1 = pkDecode(pk)
    # print(f"\nœÅ : {rho.hex()}")

    # for i in range(len(t1)):             
    #     print(f"\nt1[{i}] = [{', '.join(map(str, t1[i]))}]")


    # # #--------  Step 2:
    c_h, z, h = sigDecode(sign)
    # print(f"\nc_h : {c_h.hex()}") 

    # for index, poly in enumerate(z):
    #     print(f"\nz {index} = {poly}")

    # print("Hint Vector (h):")
    # for poly_index, hint_poly in enumerate(h):
    #     print(f"\nh[{poly_index}]: {hint_poly}")


    # # #--------  Step 3 & 4:
    # if h == 1:
    if h == None:
        return False


    # # #--------  Step 5:
    # print(rho)
    A = ExpandA(rho)
    print(A[0][0])
    # for i in range(rows_k):
    #     for j in range(cols_l):
    #         print(f"\nA[{i}][{j}] = {A[i][j].tolist()}")


    # # #--------  Step 6:
    tr = compute_tr(pk)
    # print(f"\ntr : {tr.hex()}") 


    # # #--------  Step 7:
    mu = compute_mu(tr, M_prime)
    # print(f"\nmu : {mu.hex()}") 


    # # #--------  Step 8:
    v_c = SampleInBall(c_h)
    # print(f"\nv_c : {v_c}") 


    # # #--------  Step 9:
    w_approx = compute_w_approx(A, z, v_c, t1)
    # for i, poly in enumerate(w_approx):
    #     print(f"\nw_approx[{i}] = [{', '.join(map(str, poly))}]")


    # # #--------  Step 10 & 11:
    w1 = []
    for i in range(len(h)):  #
        w1.append(use_hint(h[i], w_approx[i]))
    # for i, poly in enumerate(w1):
    #     print(f"w1[{i}] = {poly}")


    # # #--------  Step 12:
    w1_encoded = w1Encode(w1)
    # print(f"\nw1_enc : {w1_encoded.hex()}") 

    c_h_star = compute_commit_hash(mu, w1_encoded)
    # print(f"\nc_h_star : {c_h_star.hex()}")


    # # #--------  Step 13:
    ch_chstar_check = (c_h == c_h_star)
    return (compute_infinity_norm(z) < gamma1 - beta) and (ch_chstar_check)




pk_hex
pk = bytes.fromhex(pk_hex)

m_hex = '107B220CC660FC7710D2F103B72B8905F4A8E69EDA5F67A9513D26D3A4CE70BADCDDC71F10ACE038619673B47E87C4C99041659F6EFB35D89A33B9A6985E0E8387708B7CF51946594755990F3701DC0AE4BF32B352F72B6759BD395706288DFBA6ABB65B92A989C2F4B7969A628E95D38BBFCF2659B52F3DCC1D257EDC3B11DEEFFC9ECDD568CAB3E68B688235F8847E3B159318077DF744798BC35C5D6F4E5D39CC92E70CD1E91ED8D6A451FAA8C9907A82EE2B984BAB81E3AA9EBE86A28A8ADD632AFF88FE002A402B64B2FFDBEF18494AFFE7FA2BC064CB1AE60CFB29493C88A32CE9C013DA7A69E85658B0769CC9B79AE7D0DF132E094CEB1263796A12978314289BA4A6B2311ADFFA28350C50DE7D5F770EC1CD51B13FD0907345F55964108C6501541A282EA8A99D30C56DDADD5F5858D2CE2324E9167DB6CCD55BDBB80FC09510EAB036D6314532E5B6672FF59D66CE20AD6924A69C4FB18AF05A74DA8E5497F46278432E79063BF3C9C038C708A7274936690DA7B4F8882DDEAFDC6D39FCA6EF2F379CC5B0058ABB10D99E257D903ACDC7AED63444C72CFF3DF33303C14CCD68E6B5584274EEF80D9E516FE1F7C62112B39DB906648CA5877A11B3A812290C7FBA96EC9EA2ED6B81B53BC1EA4EA611F19B462CCECC87FED254FA30E070AD485F3CBD8708B8BC58E06B868E635EF982AAF124555B88493D429FA45BFACDD707439E20E4D1510215F0A1B5170ACA9D77AFF5FDB778F0E77F208ED90BCEADF99582905901D6A977A8A89C46420869CC1BAA7308F4635A989D9FF68D48F9ABB236E3BE80D7E548EAB8E96011108E8676ADD7D2B780E4DC5403673F49C0616109BAACD4C97E17A4EE61F3EDD1B75D00DCE9B6EFA902655F0BAC3D977BD3AADDA5BA186E116A702D9D81D41CDFEF89919AE312F39E071C2228BD3E39ABB425C27ED3DD5B49F8E4EEDD55F7C5248E1C49E6E94BA19628B083156266F5594D829447F9ABFC39707BE684A91C4F8B32848FB397862E486DBC29CF17CBC5DE6998F9A482F8A91DCFE16C17940E5352809AE127455EF14627163FA2C8CC1BDC927A93FC6FCF2513ACD41189CD555FAC5FF29B32A85758FC956974A70B56F2E16A3A6CF3BBB2451CCC897F9E5A87B09BBE4AF9BBAD8517FF6D4EAFB5ECF29C2C726B107DF11DF758AE49B8BF57C64B441E6099A782644D7BB85E11B20AF3658448D764A6CBCFFC58F17B20FA01CF5D7E01BAA95176E403D712DC4DED76E9D4CE44B98FB5454CFEC8B2108C863B5F58054B879BDFC2A93ED78CA9F3CA97AE697E025C5A59D5A9069C996BFBB4BC8F8005A7E49CDF67D62A9E13645F4BE99833ADC54816BC65FFE9E86602B5EC47513BEBF4DC63CA5C2EC61818BF59BF926C9F4E574306F87B75E20AAFF80D2EEE425D6C23F1B789E68AF1CB409132470A99E17430A42FA5BD5FDCAC6649554DFA07AA4B07635873E1D0F286E8C3575722495404460835988D64CF7B64995AD911D98F98E954905E9D277C663DBD0A8DDA4146C0236627899F939F97C1F59B5E373043F25032996809776B6E91D52C2DFC917100F7910955CCE0CA82BD9AD608950E3C69EA061E4C413D512DBBF4696A165C3297FE316C73992EF96F7EDAA65BA42762FB3F428A2E2870316405A383C64F485D63F57B30F80A7BAC753547BC72A256D03FBAB9B274C027132F2977EF46A32EB63B4D49B275661DB4F2B74B563B9F5BDBF4E927F50584ABACA7F09616BF6E63C08B835CCD7E4BBA66AFBF361F6DCF03C53F365DAA64BA39971BC7FD30CDCD7329D7B8253F659B1252948BAF3F1BC674A52163E333973B79B1C3C168909E4EF25FFE52E6E17425292369F5E5DD6CFC5884589B7FBF2D727BBE9A9A658FBE7C4779691B3B744BCC41A02310A513F9144C2850270DE5C85B7B39C632AEB6C64D340E09DEF2B825A9AB6581471AA8AC42F049512BDCF28B51575CD4601DF632C3E83EB95156E95E9D542C1A983720B7509AE428E179AF8BED605FC7505679D5C5FDB868D2F94627192BCADA67E0EBB01FAC2ADAF3BC307C5010B2987E0289682F93FB83E740647A75D8E511F6009BA0F8DECADABEA869C080A0A83674BB00FE3CC0DA0281E38FE987E8825D7DB11DF94726547E01C6290A967C677729EB63F73563C213F9E2C74C5CCBA1E7B2003DE817D222D7B33662FFD4D4E54930EBB528D0355DBB9935CB6AFE07B464C6FDDE7BC59762DF14342D931E5B48C44CC654112F67E5907C037F7AB1360CE0C9815B1C98320F84FDE48FB5C6D9BE18B07CA00BE87DE5221A76AED51C60C3A4EAF36CDD74F840EDD13D8F1589FF072AD89BDB75DBF6D4355FD015D920E1C18DFA19B5CD0396B48BF17C02BCB344F22F50CEB6DDEDBDBD9FC1707428843269D4F943597C2F58F98E79C833989695A5D3F8990B8AB5BBD05395E426FD252D54241498525917EBC95C596B99BD115384E76D9955D8567E6C4B9C7167F8B452FA128644EC1A7C136C4E71620922076CC5FCDCDB50203FDA6901B3CE6D84393BBF628EA02AD75060C2BDB995B3C07F1F1A09F5A13374B488B3B01C3C7B3FD126E3252289412276BB9D104F05A8F28B853D2E0D3EAA1D60E2EBCFC2A092EE7111C262883F45BD4E2848A0BE9356A0587651AE2AEC5093886B6468468F4ABE5C5CA4A5A50168DD34681B5ED23389C44A325F0D5EEE4A15B76763F01C792669861AD34858A0D2B883B09D750208FBEC5C80E26CF9D1D82FA5FD4677B9EC8DD1DE1D66CE1FE6452C9E58DE371EF012FDDF1DDCA94B0486EDE8F32E9ECD711061E8BC651505DB09392A2E717FBEC122D49B13E8CA4D758D43326CA9281F705B10D89CF941C4AE11C8E72A1FD948B959921B4E0F2881E9FEE1FD29C317A3F1644A08B93818533E22AB3C6AB34B568B6DF6834D1983BB63C911B44C7FE6594D329B767665B5AFDDDF35D2CA8B4BFAB32E7D101D64D68CDAC16D6FE8F63374F575C8B5AEFE84087E13E823A65E7CD039F9AA80F3DCCF15E74975FB6D34C3C603DB30465C84F45EAE71ECEC7ABED64FBCDAA3ABBC374F26BC2439A25D33796B0063E27CAD38ABDCA467B843028B3A21ECD22EE69FC329E658DE7F076098C567B4EF78B4DFC322EBC1436EE61EA8053B2B9A3B229A2E5A7818C23FD0246C20134DD6EB07C665BB28F5C914FA3B41A898AFA37381AC133DA0F73E1A9BEB17B5D63DAA28C640B4DE9F1BE836D8CE52B7325D2AE7D9425DBD759C2BBCA504D7102BA2E34CF37406C2967CB6DF6A89DACCB3E41E73FB4257B98A9D9CCC034A5B55FA52BFB39A059C51D0262930FCE85B12692F06015AD162EA557D528FC5D6E9C0ADB2C7C59B43FBBAE679455E2DAC37DD2C61A3EC0A0807C2185AF696C082CA158457DD33C587730C1B110A62947A454C1413118FEC6D178AE58C4D0F5016CCF0DBD9D872F84BF03EF18F5A2293ED4F656947AD8C72A5EE5DC9D67EB5C6659C75339D4FE3E0AF93C19F8335DBCAE16164421374EC8CFF8D2BBCB9228C0C8FC1276B2403F4529179DE34398C00D1AB16EC628B45888C089A3691A274598DC7FA2C830686E1CDC3F0889B00F427361FCD3113B05407BC452DF206D0B8421915DE2960C31F9EDC299CB69202CDBAFAA0074AE48E6F6CF05BF0A3A5630A6A7A828A69BAEFC73E69B2BF821C4562ADE9D355103A32C5A47E9818280288519CABB8FBF4AFB78D4FB1427CA932EE050983F32CF7FFB62276773920483E7881E65CF270214EE5A015CA54C75DA93CDD9FE157A0846FAD8E1CD94ADA4FCC58A378A026E6108EE66024779BA48DD3FCC05189EDA0E2F0220C4202FE07AF0917B16FE19A596A8D678D813991A67BF0911BE1F9E3677DC78512F99074771B6799B51E17951EEEDDBA35F16B6867031C9CB67A1A6F48BF35C80500883624C358F8EAA095C218A70C355042A39D46CC859B30B437D014523A4BE0303D2A232DFCD88EB235ED9E4C51EE4B2EC1830A16F9422BAC64219BE7AA1F8E340F6A95576311C5AEB43F0FB14795D5D2B7BF72C87FEF9AD382873FC28742F1449EE6E227C103ED334C8A069415AD33A3E3222A9C642C1AF192565A51451238BAD3245F7B39B9F5E25BD6F59AE12D29DDD885D4BFFDC569FD621BE1B6E5490A4124E7C13F8A0C29B8E22762CD297C0C730D3F9A50535DA19563E9886271D809BEA41E17EEA1371C73D5281D9F5ACCE7EA7D528FEF07AF603CD56276A780FFE000C6BC9A10678AC69D2EA2FFB39977F7DA91086152D8D07B3E2F7E7867D44B16D5DCB71652A778F3DFA568BF82ED8FBA4ECA4BF396D4BCB7DD0F41895A6A6B05EE25ED4354C5C126859E360E90AD8A80B9D9E3D3DA3A3BC21F0BDC14CDFE9215B3F96D0D6E4994319D262DD197DCC3B9230F87EC801FFE5C325C8CE9F75F4CB270CDEB5467AD9041C663F2D8966E1FACF5D4731AB102E39E4DD5BBFF8A5B9590FEC440B688B88E962A38EF63BE4B31ED5B17448DEF4B77B184730DF544BB7AB6C7B124C75C7AC33961626628B367125BCBFF'
M_prime = bytes.fromhex(m_hex)

sig_hex
sign = bytes.fromhex(sig_hex)

ctx_h = 'B3421B04B5FCC8D668E5059FF18F3C16FA8228AEB7E2251D8FEAF7E0EF1A9BFCBC045243052BE48F7855AB75B764320729C595E3A342B6058621309A8B412C135ABD04239765DB8F65CCF16DE8AB3FBF8483211B2EF6B9C027E9A9E1BB4A5B6AC39321F624B68B4BE1C4D95D02DDEF2F02EBE4E7ABEFA77BB328DA22B0BC543F29F44BD7DB41AB696BCD0BD5726DE8020C5A9D0F8A855E0F6BFC38CF20F618EC9A4CCAEBE0FB8AA0FB6E6D09FE1278ECF7FA19C9A8EE8BF4E02CD265E2A7D7D8D609E8EA59E0FD262346FE15793E3B3D611B76F7CFEFF5823624CCDE21ADE7FA84E6473950DA076EF2E9B89E71C218AC0AF412C9A15BBF1E4339C5614FEF'
ctx = bytes.fromhex(ctx_h)

verification = Verify(pk, M_prime, sign, ctx)
# print("Verification Result:", verification)