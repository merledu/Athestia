//module BitPack_tb;

//    // Parameters for BitPack module
//    parameter int a = 2;
//    parameter int b = 2;
//    parameter b_len = $clog2(a + b)+1;

//    // Testbench signals
//    logic signed [31:0] w [255:0];  // Input array of 256 elements, each b_len bits wide
//    logic [(b_len * 256) - 1:0] outputt;  // Output bit-string

//    // Instantiate the BitPack module
//    BitPack #(
//        .a(a),
//        .b(b),
//        .b_len(b_len)
//    ) uut (
//        .w(w),
//        .outputt(outputt)
//    );

//    // Initial block to initialize signals and run the test
//        // Statistically assign values to the w array (256 elements)
//        // For simplicity, we assign static values within the range [-2, 2]
        
//        // Assigning values to w[0] to w[255]
      
//    initial begin
//        // Static assignment of values from -2 to 2 in a repeating pattern
//        w[0] = -2;  w[1] = -1;  w[2] = 0;  w[3] = 1;  w[4] = 2;
//        w[5] = -2;  w[6] = -1;  w[7] = 0;  w[8] = 1;  w[9] = 2;
//        w[10] = -2; w[11] = -1; w[12] = 0; w[13] = 1; w[14] = 2;
//        w[15] = -2; w[16] = -1; w[17] = 0; w[18] = 1; w[19] = 2;
//        w[20] = -2; w[21] = -1; w[22] = 0; w[23] = 1; w[24] = 2;
//        w[25] = -2; w[26] = -1; w[27] = 0; w[28] = 1; w[29] = 2;
//        w[30] = -2; w[31] = -1; w[32] = 0; w[33] = 1; w[34] = 2;
//        w[35] = -2; w[36] = -1; w[37] = 0; w[38] = 1; w[39] = 2;
//        w[40] = -2; w[41] = -1; w[42] = 0; w[43] = 1; w[44] = 2;
//        w[45] = -2; w[46] = -1; w[47] = 0; w[48] = 1; w[49] = 2;
//        w[50] = -2; w[51] = -1; w[52] = 0; w[53] = 1; w[54] = 2;
//        w[55] = -2; w[56] = -1; w[57] = 0; w[58] = 1; w[59] = 2;
//        w[60] = -2; w[61] = -1; w[62] = 0; w[63] = 1; w[64] = 2;
//        w[65] = -2; w[66] = -1; w[67] = 0; w[68] = 1; w[69] = 2;
//        w[70] = -2; w[71] = -1; w[72] = 0; w[73] = 1; w[74] = 2;
//        w[75] = -2; w[76] = -1; w[77] = 0; w[78] = 1; w[79] = 2;
//        w[80] = -2; w[81] = -1; w[82] = 0; w[83] = 1; w[84] = 2;
//        w[85] = -2; w[86] = -1; w[87] = 0; w[88] = 1; w[89] = 2;
//        w[90] = -2; w[91] = -1; w[92] = 0; w[93] = 1; w[94] = 2;
//        w[95] = -2; w[96] = -1; w[97] = 0; w[98] = 1; w[99] = 2;
//        w[100] = -2; w[101] = -1; w[102] = 0; w[103] = 1; w[104] = 2;
//        w[105] = -2; w[106] = -1; w[107] = 0; w[108] = 1; w[109] = 2;
//        w[110] = -2; w[111] = -1; w[112] = 0; w[113] = 1; w[114] = 2;
//        w[115] = -2; w[116] = -1; w[117] = 0; w[118] = 1; w[119] = 2;
//        w[120] = -2; w[121] = -1; w[122] = 0; w[123] = 1; w[124] = 2;
//        w[125] = -2; w[126] = -1; w[127] = 0; w[128] = 1; w[129] = 2;
//        w[130] = -2; w[131] = -1; w[132] = 0; w[133] = 1; w[134] = 2;
//        w[135] = -2; w[136] = -1; w[137] = 0; w[138] = 1; w[139] = 2;
//        w[140] = -2; w[141] = -1; w[142] = 0; w[143] = 1; w[144] = 2;
//        w[145] = -2; w[146] = -1; w[147] = 0; w[148] = 1; w[149] = 2;
//        w[150] = -2; w[151] = -1; w[152] = 0; w[153] = 1; w[154] = 2;
//        w[155] = -2; w[156] = -1; w[157] = 0; w[158] = 1; w[159] = 2;
//        w[160] = -2; w[161] = -1; w[162] = 0; w[163] = 1; w[164] = 2;
//        w[165] = -2; w[166] = -1; w[167] = 0; w[168] = 1; w[169] = 2;
//        w[170] = -2; w[171] = -1; w[172] = 0; w[173] = 1; w[174] = 2;
//        w[175] = -2; w[176] = -1; w[177] = 0; w[178] = 1; w[179] = 2;
//        w[180] = -2; w[181] = -1; w[182] = 0; w[183] = 1; w[184] = 2;
//        w[185] = -2; w[186] = -1; w[187] = 0; w[188] = 1; w[189] = 2;
//        w[190] = -2; w[191] = -1; w[192] = 0; w[193] = 1; w[194] = 2;
//        w[195] = -2; w[196] = -1; w[197] = 0; w[198] = 1; w[199] = 2;
//        w[200] = -2; w[201] = -1; w[202] = 0; w[203] = 1; w[204] = 2;
//        w[205] = -2; w[206] = -1; w[207] = 0; w[208] = 1; w[209] = 2;
//        w[210] = -2; w[211] = -1; w[212] = 0; w[213] = 1; w[214] = 2;
//        w[215] = -2; w[216] = -1; w[217] = 0; w[218] = 1; w[219] = 2;
//        w[220] = -2; w[221] = -1; w[222] = 0; w[223] = 1; w[224] = 2;
//        w[225] = -2; w[226] = -1; w[227] = 0; w[228] = 1; w[229] = 2;
//        w[230] = -2; w[231] = -1; w[232] = 0; w[233] = 1; w[234] = 2;
//        w[235] = -2; w[236] = -1; w[237] = 0; w[238] = 1; w[239] = 2;
//        w[240] = -2; w[241] = -1; w[242] = 0; w[243] = 1; w[244] = 2;
//        w[245] = -2; w[246] = -1; w[247] = 0; w[248] = 1; w[249] = 2;
//        w[250] = -2; w[251] = -1; w[252] = 0; w[253] = 1; w[254] = 2;
//        w[255] = -2;

//        // Display the values for verification
      
//   end
//        // Apply the reset and start the simulation
     
//endmodule
