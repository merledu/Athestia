//module Top (
//    input logic btn,
//    input logic clk,
//    input logic rst,
//    output logic led
//);

//    // Parameters
//    parameter int a = 2;
//    parameter int b = 2;
//    parameter b_len = $clog2(a + b) + 1;

//    // Signals
//    logic [b_len-1:0] w [255:0];        // Input array of 256 elements
//    logic [767:0] outputt; // Output bitstring
//  //  logic led; 
//    // logic led; // LED signal
   
//       // Clock and reset signals
//   //    logic clk;
//  //     logic rst;                         // LED signal

//    // Expected output register
//    logic [(b_len * 256) - 1:0] expected_output;
    

//    // Instantiate the BitPack module
//    BitPack #(
//        .a(a),
//        .b(b),
//        .b_len(b_len)
//    ) uut (
//        .w(w),
//        .outputt(outputt)
//    );

//    // Static input assignment for `w`
//  initial begin
//        expected_output=786'h68885310a8195032842988530620ca10a8194214c429846065405310a8195032842983106508530ca8133023106540ca81950b42141a2215032a02c28530d110a81950161429829c4434606540ca81942168346045888b0a16214c3462644298;
//        w[0] = 2;   
//                w[1] = -1;  
//                w[2] = 0;   
//                w[3] = 1;   
//                w[4] = -2;  
//                w[5] = 2;   
//                w[6] = 1;   
//                w[7] = -1;  
//                w[8] = 0;   
//                w[9] = -2;  
//                w[10] = 1;  
//                w[11] = 0;  
//                w[12] = -1; 
//                w[13] = 2;  
//                w[14] = -1; 
//                w[15] = 0;  
//                w[16] = 1;  
//                w[17] = -2; 
//                w[18] = 2;  
//                w[19] = -1; 
//                w[20] = 1;  
//                w[21] = -2; 
//                w[22] = 0;  
//                w[23] = 2;  
//                w[24] = -1; 
//                w[25] = 1;  
//                w[26] = 0;  
//                w[27] = -2; 
//                w[28] = 2;  
//                w[29] = -1; 
//                w[30] = 1;  
//                w[31] = 0;  
//                w[32] = 2;  
//                w[33] = -2; 
//                w[34] = 1;  
//                w[35] = 0;  
//                w[36] = -1; 
//                w[37] = 2;  
//                w[38] = 0;  
//                w[39] = -1; 
//                w[40] = 1;  
//                w[41] = -2; 
//                w[42] = 2;  
//                w[43] = 0;  
//                w[44] = 1;  
//                w[45] = -1; 
//                w[46] = 2;  
//                w[47] = -2; 
//                w[48] = 0;  
//                w[49] = 1;  
//                w[50] = -1; 
//                w[51] = 2;  
//                w[52] = -2; 
//                w[53] = 0;  
//                w[54] = 1;  
//                w[55] = -1; 
//                w[56] = 2;  
//                w[57] = -2; 
//                w[58] = 1;  
//                w[59] = 0;  
//                w[60] = -1; 
//                w[61] = 2;  
//                w[62] = 1;  
//                w[63] = 0;  
                
//                // Fill remaining w[64] to w[255] with alternating pattern of values [-2, -1, 0, 1, 2]
//                w[64] = -2; 
//                w[65] = -1; 
//                w[66] = 0;  
//                w[67] = 1;  
//                w[68] = 2;  
//                w[69] = -1; 
//                w[70] = 0;  
//                w[71] = 1;  
//                w[72] = -2; 
//                w[73] = 0;  
//                w[74] = 2;  
//                w[75] = -1; 
//                w[76] = 1;  
//                w[77] = 2;  
//                w[78] = -2; 
//                w[79] = 0;  
//                w[80] = 1;  
//                w[81] = -1; 
//                w[82] = 2;  
//                w[83] = -2; 
//                w[84] = 0;  
//                w[85] = 1;  
//                w[86] = -2; 
//                w[87] = 2;  
//                w[88] = 1;  
//                w[89] = 0;  
//                w[90] = -1; 
//                w[91] = 2;  
//                w[92] = -1; 
//                w[93] = 0;  
//                w[94] = 1;  
//                w[95] = -2; 
//                w[96] = 0;  
//                w[97] = 2;  
//                w[98] = -1; 
//                w[99] = 1;  
//                w[100] = 2; 
//                w[101] = -2; 
//                w[102] = 0;  
//                w[103] = 1;  
//                w[104] = -1; 
//                w[105] = 2;  
//                w[106] = -2; 
//                w[107] = 0;  
//                w[108] = 1;  
//                w[109] = -2; 
//                w[110] = 2;  
//                w[111] = 1;  
//                w[112] = 0;  
//                w[113] = -1; 
//                w[114] = 2;  
//                w[115] = 0;  
//                w[116] = 1;  
//                w[117] = -2; 
//                w[118] = 2;  
//                w[119] = 0;  
//                w[120] = -1; 
//                w[121] = 1;  
//                w[122] = -2; 
//                w[123] = 0;  
//                w[124] = 1;  
//                w[125] = -1; 
//                w[126] = 2;  
//                w[127] = -2; 
//                w[128] = 0;  
//                w[129] = 1;  
//                w[130] = -1; 
//                w[131] = 2;  
//                w[132] = -2; 
//                w[133] = 0;  
//                w[134] = 1;  
//                w[135] = -1; 
//                w[136] = 2;  
//                w[137] = 0;  
//                w[138] = -2; 
//                w[139] = 1;  
//                w[140] = 0;  
//                w[141] = 2;  
//                w[142] = -2; 
//                w[143] = 1;  
//                w[144] = -1; 
//                w[145] = 0;  
//                w[146] = 2;  
//                w[147] = -2; 
//                w[148] = 0;  
//                w[149] = 1;  
//                w[150] = -1; 
//                w[151] = 2;  
//                w[152] = -1; 
//                w[153] = 0;  
//                w[154] = 1;  
//                w[155] = -2; 
//                w[156] = 2;  
//                w[157] = 0;  
//                w[158] = 1;  
//                w[159] = -1; 
//                w[160] = 2;  
//                w[161] = 0;  
//                w[162] = -2; 
//                w[163] = 1;  
//                w[164] = 2;  
//                w[165] = -1; 
//                w[166] = 0;  
//                w[167] = 1;  
//                w[168] = -2; 
//                w[169] = 2;  
//                w[170] = 0;  
//                w[171] = 1;  
//                w[172] = -1; 
//                w[173] = 2;  
//                w[174] = -2; 
//                w[175] = 0;  
//                w[176] = 1;  
//                w[177] = -1; 
//                w[178] = 2;  
//                w[179] = -2; 
//                w[180] = 0;  
//                w[181] = 1;  
//                w[182] = -2; 
//                w[183] = 2;  
//                w[184] = -1; 
//                w[185] = 0;  
//                w[186] = 1;  
//                w[187] = 2;  
//                w[188] = -2; 
//                w[189] = 0;  
//                w[190] = 1;  
//                w[191] = -1; 
//                w[192] = 2;  
//                w[193] = -2; 
//                w[194] = 1;  
//                w[195] = 0;  
//                w[196] = 2;  
//                w[197] = -1; 
//                w[198] = 0;  
//                w[199] = 1;  
//                w[200] = -2; 
//                w[201] = 2;  
//                w[202] = -1; 
//                w[203] = 0;  
//                w[204] = 1;  
//                w[205] = -2; 
//                w[206] = 2;  
//                w[207] = 0;  
//                w[208] = 1;  
//                w[209] = -1; 
//                w[210] = 2;  
//                w[211] = -2; 
//                w[212] = 0;  
//                w[213] = 1;  
//                w[214] = -2; 
//                w[215] = 2;  
//                w[216] = 0;  
//                w[217] = 1;  
//                w[218] = -1; 
//                w[219] = 2;  
//                w[220] = 0;  
//                w[221] = -2; 
//                w[222] = 1;  
//                w[223] = 2;  
//                w[224] = -1; 
//                w[225] = 0;  
//                w[226] = 1;  
//                w[227] = -2; 
//                w[228] = 2;  
//                w[229] = -1; 
//                w[230] = 0;  
//                w[231] = 1;  
//                w[232] = -2; 
//                w[233] = 2;  
//                w[234] = 0;  
//                w[235] = 1;  
//                w[236] = -1; 
//                w[237] = 2;  
//                w[238] = -2; 
//                w[239] = 0;  
//                w[240] = 1;  
//                w[241] = -1; 
//                w[242] = 2;  
//                w[243] = -2; 
//                w[244] = 0;  
//                w[245] = 1;  
//                w[246] = -2; 
//                w[247] = 2;  
//                w[248] = -1; 
//                w[249] = 0;  
//                w[250] = 1;  
//                w[251] = -2; 
//                w[252] = 2;  
//                w[253] = 1;  
//                w[254] = 0;  
//                w[255] = -1; 
//    end


//        // Fill `w[64]` to `w[255]` with an alternating pattern
        
//        // Assign the expected output (manually computed for testing)
        
//        // Wait for output calculation
////        #10;
//        always_ff @(posedge clk or posedge rst) begin
//        if (rst) begin
//            led <= 1'b0; // Reset LED
//        end else if (btn) begin
//            if (expected_output == outputt) begin
//              led <= 1'b1;
            
//            end else begin
//                led <= 1'b0;
//            end
//        end
//    end
//endmodule

//        // Display test results
////        $display("Expected Output: %b", expected_output);
////        $display("Generated Output: %b", outputt);
////        $display("LED Status: %b", led);

//        // End simulation
// //        end
////        $finish;
   

////endmodule
