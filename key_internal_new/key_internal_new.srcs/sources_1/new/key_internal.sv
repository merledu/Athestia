import Dilithium_pkg::*;

function automatic logic [63:0] extend_bits2(
    input logic [3:0] value,
    input int target_width,
    input bit is_signed
);
    logic [63:0] extended_value;
    int i;

    extended_value[63:0] = value;

    if (is_signed) begin
        for (i = 4; i < target_width; i++)  
            extended_value[i] = value[3];   
    end else begin
        for (i = 4; i < target_width; i++) 
            extended_value[i] = 1'b0;       
    end
    
    return extended_value;
endfunction

module key_internal(
    input  logic clk, rst,
    input  logic [255:0] zeta,
    output logic final_done,
    output logic [39167:0] sk,
    output logic [20735:0] pk    
);

    logic [255:0] swapOut;
    SwapNibbles #(256) swap (
        .in(zeta),
        .out(swapOut)
    );

    logic shakeDone, shakeRst, expandA_rst, expanda_done, s1_ntt_done, compute_t, shakeDone2, shakeStart;
    logic ntt_module_rst, t_ntt_done, nttinv_done, nttinv_rst, nttnew_done, pk_rst,sk_rst;
    logic [271:0] shakeIn;
    logic [511:0] shakeOut2;
    logic [1023:0] shakeOut;
    logic [20735:0] shakeIn2;
    logic [31:0] A [0:k-1] [0:l-1] [0:255];
    logic [3:0] count, ntt_count, nttinv_count, nttinv_count2;
    logic signed [($clog2(eta)+1):0] s1 [0:l-1] [0:255];
    logic signed [($clog2(eta)+1):0] s2 [0:k-1] [0:255];
    logic expands_done, rst_ntt, nttdone, ntt_disabler;
    logic signed [63:0] w [0:255], nttinv_w [0:255], checking [0:255];
    logic signed [31:0] w_hat [0:255], s1_ntt [0:l-1] [0:255];
    logic signed [63:0] nttinv_w_hat [0:255], t_ntt [0:k-1] [0:255];
    logic [2:0] i, j;
    logic [8:0] countA;
    logic [63:0] power2round_t;
    logic [9:0] power2round_t1;
    logic signed [12:0] power2round_t0;
    logic [63:0] power_t [0:k-1] [0:255];
    logic [9:0] power_t1 [0:k-1] [0:255];
    logic signed [12:0] power_t0 [0:k-1] [0:255];
    logic signed [12:0] sk_t0 [0:k-1] [0:255];
    logic [255:0] pkencode_rho;
    logic [9:0] pkencode_t1 [0:k-1] [0:255];       
    logic pk_done;   
    logic signed [63:0] t [0:k-1] [0:255];

    always_ff @(posedge clk or posedge rst) begin
        if (rst) begin
            shakeIn <= 272'd0; 
            i = 0;
            j = 0;
            countA = 0;
            nttinv_count <= 0;
            
            for (int m = 0; m < k; m = m + 1) begin
                for (int n = 0; n < 256; n = n + 1) begin
                    t_ntt[m][n] <= 32'd0;
                end
            end
        end else begin
            ntt_module_rst <= rst_ntt || nttdone;
            shakeIn <= {l[7:0], k[7:0], swapOut}; 
            if (shakeDone && expandA_rst === 'x) expandA_rst <= 1;
            if (expandA_rst) expandA_rst <= 0;
            if (expands_done && rst_ntt === 'x) begin
                rst_ntt <= 1;
                ntt_count <= 0;
                count <= 0;
            end 
            if (count >= 0) count <= count + 1;
            if (expands_done && count == 1) rst_ntt <= 0;
            if (ntt_count < l && nttdone && ~ntt_module_rst) begin
                s1_ntt[ntt_count] <= w_hat;
                ntt_count <= ntt_count + 1;
            end
            if (ntt_count == l && s1_ntt_done === 'x) begin
                s1_ntt_done <= 1;
                ntt_disabler <= 1;
            end
            if (expands_done) begin
                for (int k = 0; k < 256; k++) begin
                    w[k] = extend_bits2(s1[ntt_count][k], 64, 1);
                end
            end
            if (expanda_done && s1_ntt_done && expands_done && t_ntt_done === 'x) begin
                t_ntt[i][countA-1] <= t_ntt[i][countA-1] + (A[i][j][countA-1] * s1_ntt[j][countA-1]);
                if (i == 7 && j == 6 && countA == 256) begin
                    i <= 'x;
                    j <= 'x;
                    countA <= 'x;
                    t_ntt_done <= 1;
                end
                if (countA < 256) countA <= countA + 1;
                else begin
                    countA <= 0;
                    if (j < l-1) j <= j + 1;
                    else begin
                        j <= 0;
                        if (i < k-1) i <= i + 1;
                        else i <= 0;
                    end
                end
            end
            nttinv_rst <= nttinv_done || t_ntt_done;
            nttinv_w_hat <= t_ntt[nttinv_count2];
            if (nttinv_done && ~nttinv_rst) begin
                t[nttinv_count2] <= nttinv_w;
                checking <= t_ntt[1];
                nttinv_count2 <= nttinv_count2 + 1;
            end
//            $display("hello",t_ntt[0]);
            if (t_ntt_done) begin
                nttinv_count2 <= 0;
                nttinv_w_hat <= t_ntt[0];
                nttinv_count <= nttinv_count + 1;
                if (nttinv_count == 1) begin
                    t_ntt_done <= 0;   
//                    $display("hello",t_ntt[0]);
                    //j <= 'x;
                    //countA <= 'x;             
                end
            end
//            t[j][countA] <= t[j][countA] + s2[j][countA];
            if (nttinv_count2 == 8) begin
                nttinv_rst <= 'x;
//                            t[j][countA] <= t[j][countA] + s2[j][countA];
                power2round_t <= t[j][countA] + s2[j][countA];
//                if (countA == 255) begin
//                power_t1[j][countA] <= power2round_t1;
//                power_t0[j][countA] <= power2round_t0;
//                end else begin
                power_t1[j][countA-1] <= power2round_t1;
                power_t0[j][countA-1] <= power2round_t0;
//                end
//            if (j === 'x && countA ==='x)begin
                //j <= 0;
                //countA<=0;
            if ((j == 7 && countA == 256)) begin
                countA <= 257;
            end else begin  
                                        if (countA == 256) begin
                                            countA <= 0;
                                            if (j == 7) begin
                                                j <= j;                                 
                                            end else
                                                j <= j + 1;
                                        end else begin
                                            countA <= countA + 1;
                                        end
                                    end             
                            end

//            if (j == 7 && countA == 256 && nttinv_count == 2) begin
//                nttinv_count <= 0;
//            end
//pkencode_t1 <= power_t1;
    
    if (pk_rst && nttinv_count == 3) begin        
        pkencode_rho <= shakeOut[255:0];
        pkencode_t1 <= power_t1;
    end
            
            if (pk_rst && nttinv_count == 4) begin
    pk_rst <= 0;
//    pkencode_rho <= shakeOut[255:0];
//    pkencode_t1 <= power_t1;
    nttinv_count <= nttinv_count;
end else if (j == 7 && countA == 257) begin
    if (pk_rst === 'x) begin  // First clock
        pk_rst <= 1;
        nttinv_count <= nttinv_count + 1;
    end 
    if (pk_rst == 1) begin // Second clock
        pk_rst <= 1;
        nttinv_count <= nttinv_count + 1;
    end
end

if (pk_done && shakeRst === 'x) begin
    
    shakeRst <= 1;
end
if (shakeRst) begin
    shakeRst <= 0;
//    $display("hello: %h",pk);
    shakeIn2 <= pk;
end
if (pk_done && shakeRst == 0) begin
    shakeStart <= 1;
end
if (shakeDone2 && sk_rst === 'x) begin
    sk_rst <= 1;
    sk_t0 <= power_t0;
    for (int i = 0; i < k; i++) begin
      $write("sk_t0[%0d]: ", i);
      for (int j = 0; j < 256; j++) begin
        $write("%0d ", power_t0[i][j]);
      end
      $write("\n");
    end
end else if (sk_rst) begin
    sk_rst <= 0;     
end
        end
    end

    sponge #(
        .msg_len(276),
        .d_len(1024),
        .capacity(512)
    ) shake256 (
        .clk(clk),
        .reset(rst),
        .start(1'b1),
        .message({4'b1111, shakeIn}),
        .z(shakeOut),
        .done(shakeDone)
    );

    ExpandA expandA (
        .clk(clk),
        .rst(expandA_rst),
        .start(shakeDone),
        .rho(shakeOut[255:0]),
        .A(A),
        .done(expanda_done)
    );

    ExpandS ExpandS (
        .clk(clk),
        .rst(expandA_rst),
        .start(shakeDone),
        .rho(shakeOut[767:256]),
        .s1(s1),
        .s2(s2),
        .done(expands_done)
    );

    NTT #(.WIDTH(64)) NTT (
        .clk(clk),
        .rst(ntt_module_rst),
        .w(w),
        .w_hat(w_hat),
        .done(nttdone),
        .disabler(ntt_disabler)
    );
    
    NTT_INV #(.WIDTH(64)) NTT_INV (
        .clk(clk),
        .rst(nttinv_rst),
        .w(nttinv_w),
        .w_hat(nttinv_w_hat),
        .done(nttinv_done)
    );
    
    Power2round #(
            .T_WIDTH(64)
        ) uut (
            .t(power2round_t),
            .t1(power2round_t1),
            .t0(power2round_t0)
        );
        
    PkEncode PkEncode (
                .clk(clk),
                .reset(pk_rst),
                .rho(pkencode_rho),
                .t1(pkencode_t1),
                .pk(pk),
                .valid(pk_done)
            );       
    
    sponge #(
                    .msg_len(20740),
                    .d_len(512),
                    .capacity(512)
                ) shake256_compute_tr (
                    .clk(clk),
                    .reset(shakeRst),
                    .start(shakeStart),
                    .message({4'b1111, shakeIn2}),
                    .z(shakeOut2),
                    .done(shakeDone2)
                );
skEncode #(
                         
                        .cols_l(l),
                        .rows_k(k),
                        .n(eta),
                        .d(d)
                    ) dut (
                    .clk(clk),
                    .rst(sk_rst),
                        .rho(shakeOut[255:0]),
                        .K(shakeOut[1023:768]),
                        .tr(shakeOut2),
                        .s1(s1),
                        .s2(s2),
//                        .t0('{'{2138, 3613, 1906, 4032, -2702, -3595, 3972, 935, -2420, -431, 408, 274, 4027, 258, -2360, 1537, -1506, -779, -3137, -2490, -734, -3624, 4091, -284, -2027, 3593, 1850, -970, -533, -901, -1472, 1250, 2270, -3938, 3934, 3982, 1297, -7, -3819, 838, -3593, -1969, -2577, -2374, -3331, 1110, 1648, -3117, 2463, -4095, 2066, 3905, 215, -1627, -2820, -1717, -1219, -2841, -2752, 2439, 1657, -2675, 716, 3915, -492, 2642, 1654, -1027, -1958, 3491, 2317, -3544, -1572, 3237, 1016, -2820, 1106, 82, -1481, 2720, 1449, 3359, 2287, 1170, 3286, -3801, 1619, -2030, -2434, 3970, -431, -2327, -13, 1577, -3954, 2020, -1292, 536, -3645, -501, 3910, -1034, 2355, 107, -3784, 2343, -1495, -3203, -2789, 3585, -3553, -703, -1433, -3244, 2105, -1123, -3115, -2608, -1043, -3596, -3660, -2604, 1395, 895, -748, -2288, 1698, -1604, -3606, -2254, -1903, -3618, -1535, -988, -1024, -1327, 3680, 3288, 3, 1657, 698, -2770, -3168, 
//                                -2001, -1720, 3654, -389, 1429, -1278, -1857, 198, -2875, -168, 1709, -278, 2398, -2986, -1974, -266, -3182, 2124, 3347, -2573, -2681, -1362, 3517, -3799, -317, -2501, -1643, 1713, -1666, 28, 2447, -1263, -2006, -2992, -1345, 1682, -729, -2575, 1513, -2223, 3831, 3846, -3142, -1126, -3873, -3405, 2390, -243, 3154, -228, -1125, -1765, 3073, 2250, 2689, -2112, -1201, 2364, 1370, -2900, -3100, 1551, -520, 2298, 126, -1659, 1894, -1644, 3389, -2215, -1625, -4087, 4085, -26, 3235, 398, 1242, -3774, 3339, 568, 1760, 2911, 2328, -118, -31, 2925, -526, 1527, -348, -1546, 1094, 880, 1368, -1098, -3175, -652, 3182, -1951, -901, 479, 3868, -2116, -1254, -3542, -1471, -4084, 2245, -145, -839, 2593, -29, 3918, 1824}, '{-2259, -3789, -1621, -429, 453, 272, 900, 1095, -401, 2632, -1572, 30, 2406, -3562, -398, -3857, 542, -2772, -4031, -204, 2874, 1248, -2614, -3915, 1439, 3623, 2120, 2951, 1437, -2338, -2046, 2435, 2604, 3036, -343, 1065, -1193, 3182, 2417, -2354, 72, -160, -3822, 3170, -1934, -2689, 108, 3362, -1670, -1484, 1654, 1923, 2076, 2705, 3611, -3023, 2864, -1501, -1180, 4058, -1608, -2695, 3912, -1868, -3248, 3471, 953, 2728, -2533, -62, 964, -436, 3168, 3928, 3406, 2938, -2578, 2055, 3286, 3983, -567, 1028, -2172, -2671, -477, 2814, -1157, 1500, 3646, -1654, 4044, 572, 1423, 2934, 3929, 1879, 2063, 3926, 1890, 2138, 1273, -942, 2932, -2590, -2882, -2421, 2670, 4033, 2227, -253, -922, 1033, 3036, 293, -558, -357, -475, -2304, -1227, 1199, -1460, 1778, 4020, -2261, 2405, -1765, -2032, -639, -2800, 3293, -1692, -2290, 2298, -3090, 2746, -2332, -2942, -1910, 395, 2444, -2980, 3535, 2339, 1221, 3649, -1759, 2078, -1082, 3507, 3114, 3639, -2297, 2952, -876, -1103, -2217, 
//                                -2360, 1550, -255, -2811, 2552, -3116, -2938, 3965, -1891, -659, 2634, 3558, -2438, -2262, 2865, 1288, -1537, -2984, 3052, 3571, 1891, 1439, -1546, 646, -287, -858, 3340, 1509, 1537, -413, 1937, -591, 2561, -3865, 503, -295, 319, 54, -1318, 1656, 4019, -2500, 2609, 378, 3226, 2675, 1926, -3841, -1524, 3552, -2208, -817, -3037, 3, 69, 3702, 3197, 1521, -3030, -3413, 2752, 2433, 3328, 2374, -1172, 404, 2394, 3174, 3968, -3483, -2948, 1330, 3367, 1092, -944, -15, -2421, -1549, -1654, 1623, 3511, 511, 151, 3299, 2642, 1859, 991, 878, 985, -1050, -527, -3772, 1571, -3839, -3283, -3826, -995, 1629, -1164,
//                                506}, '{2798, 3566, 1406, 3546, 378, -345, 3987, 3533, 1192, -3664, 553, 1926, 3436, -3897, 1191, 1054, 2048, -28, 1306, 1532, -3319, -2187, 1049, -523, -3078, -3838, 2814, -3929, -2449, 3615, 146, 1299, -1626, 2769, -2975, -4000, -469, 483, 2603, 192, 567, -3577, -904, 3309, 767, -2233, 1143, -1627, -1333, -1061, -3477, 3894, 3483, 2614, 1559, 3762, -1920, -3009, -2978, 3742, 2761, 3163, -781, 2943, 3136, -3051, -2389, 2905, 916, 162, 1560, -1504, 1974, 2528, -3846, -3508, 3696, 3259, 3952, -584, 1038, 339, -1653, -2489, -3574, 3366, 3434, -1123, 3779, 3691, -1593, -2302, 2611, -2567, 3827, -1081, -525, -372, 3965, 3510, 289, 202, 3296, 143, -2571, -1423, 2147, -2065, 3921, -3323, 3113, -558, -398, -1449, -866, 3565, -1022, 1989, -1819, 2966, 2414, -636, 4018, 527, 2017, 1861, 3001, 736, 2681, 3098, -3713, -1787, 1062, -3495, 2664, 2536, 3752, 3731, 3273, -2189, -3602, -1188, 1124, -272, -3533, 3381, 1432, 3592, -1761, -116, -610, -300, 3206, -606, -2921, -3372, 546, -4003, -3034, 2677, -4060, -2538, -4071, -1854, 2134, 2509, -2981, 3559, -3242, 761, 1063, -784, -2439, 1805, -3338, 77, -1809, 481, 2334, 3550, 229, 3527, -3778, 125, -2557, -1045, -2997, -2798, -657, -957, -1680, 2462, 2909, 1495, 169, 2313, 2661, 1170, 3410, -3276, -2816, -3366, 3107, 137, -2389, -1177, -691, 1122, -3453, 875, -2812, -4079, -2970, 1748, 7, -3459, -1593, -3041, -3571, 3739, 604, -623, 3822, 3615, -3032, 356, -3032, -719, 1847, -2625, -2714, 948, -3091, -2174, 4019, 3973, -846, -2630, -1138, 4011, -3289, -1331, -1847, 2577, 260, -2886, -2666, -3428, -3771, -3926, -406, 3269, -1843, 4033, 108, 2666}, '{-2489, 1805, 1053, 3363, 
//                                -461, 3268, 629, -1342, -1169, 3444, -2093, 3418, -768, 
//                                -3443, -2875, 439, 80, -1866, 2893, 372, -3704, 1904, 634, 1532, -2548, 1652, 129, -608, -3804, -132, 1827, 2930, 391, -273, 1486, -1586, -3669, 4008, -713, 489, -1805, -3569, -540, -733, 3887, 262, 228, 3968, 1991, -2003, -333, -154, -829, -1424, -256, 2966, 1002, -514, 3733, 3495, -47, -783, -1, 2982, -3281, -2903, 47, 880, 1477, 2594, -2673, 3366, -2043, 400, 3781, -859, 1568, 1824, 2861, -1684, 645, -101, -180, -3724, -907, -3167, 2314, -2022, -3335, -3244, -1981, 3391, -894, -3564, -1796, -2012, -1609, 3610, 2511, 3423, -4030, -169, 590, 358, -1092, -368, -1771, -3780, -1412, 4017, 3894, -2956, -3383, -2333, -1796, -1730, -1404, -4057, -3879, -2023, -553, -379, 3981, 1189, 3214, -2884, -338, 846, -518, 702, -3518, 2384, 1747, 417, -2432, -422, -4017, 2100, 1202, 229, 836, 3571, -2806, -2839, 224, 2678, 252, 2968, -844, -3799, -1288, -290, -1183, 3299, 1270, -2647, 1339, -3789, 1036, -783, 522, 2107, 3744, 792, -2999, -663, -856, 3935, -2263, -785, 2072, 948, -2542, 3981, -3327, -2777, -613, -632, -2257, 1053, 2427, 3733, 2096, 1689, -485, 2160, -76, 3727, -1156, -1114, 3034, -3074, 286, -2428, -653, -1778, -3325, 865, -2614, -3226, -1986, 2664, -3853, -1442, 1645, -4069, -3802, -2023, -3320, 1583, -767, 1481, -3925, -958, 2699, -3988, -401, 182, 2775, 227, 879, 30, -501, 583, 876, -3373, 678, -3684, 1840, -2954, 2319, -3992, 3857, 929, 3290, -3625, 1996, -658, 3938, 2086, -2009, 3548, -4032, 3453, 2134, 2652, 3961, -1333, -3918, -3985, -1166, -2495, -2442, 20, 2009, -696}, '{-2451, 3447, 2003, -1618, -2426, -1184, -1193, 677, 3879, 1418, -992, 646, 919, 943, -1976, -611, 323, 661, 1595, -2181, 2037, 741, -331, -1667, -2017, -885, 2338, -3042, -338, -2441, -1195, -1831, -3254, -3700, 4058, -278, 191, -48, 1906, -4059, 1470, 1868, -3797, 3957, 1469, 12, -3004, 841, 3439, 2900, 2960, -417, -241, 81, 340, -3856, 1907, -3843, 268, 483, -3202, 1188, -2767, -1765, 
//                                -550, 41, 4044, -1621, -3135, 159, 3809, -1700, 150, 1562, 485, 3075, 1812, 472, 3849, -3455, 1663, 1122, -2601, -389, -1524, -758, -1337, 616, -586, -3102, -1157, -2039, -670, -1884, 2540, -844, -2174, -3987, -3323, -3768, 
//                                -492, 1774, 1410, 1056, -3511, -1957, 282, -1200, -2623, 182, 903, 3485, -3418, -2436, -2898, 827, 3651, -1193, 
//                                4045, 2394, -2326, -1915, -70, -3009, 1106, 4079, -1002, -1662, 1285, -3247, -2198, 3350, 3018, -1107, 2168, 2415, -3919, -2588, 2978, -3460, 1271, 3004, -2265, -3455, -1677, -1685, -637, 657, 780, -3107, 2559, -3225, 2667, 2081, 814, -821, -410, -190, 1642, -1472, -2653, -3658, -181, 518, 2606, 2045, -891, 1571, 1482, 1587, 974, -3492, 2437, 3196, -2142, 3238, -1702, 2374, -518, -2456, 3276, -486, -3268, 235, 1181, 3354, -158, 3007, -514, 1960, 3617, -2284, -3982, -3878, -1652, 1794, 2923, -635, 1886, 2589, -624, -3572, 3619, 1474, -3447, -3275, 2272, 161, 440, -3953, -2473, -2475, -1858, 2183, -2615, 1737, 2581, 2906, 1486, 2153, 3451, -2728, -1285, -1784, 2299, -2461, 1015, 164, -1107, -712, 4092, -2011, -398, -239, 2288, 1410, 2153, -2149, -1523, -1822, -555, 3093, 371, -2036, 2944, 1320, 2446, 2710, -311, 119, 4089, -4044, 2312, -2868, 3544, 3871}, '{1229, 884, -2041, 3415, -333, -3123, 3791, 560, -2022, 2321, -2910, -2699, 856, -3169, -352, -3354, 2398, 2749, -1634, 4035, -2715, 1597, 314, -3229, -1941, -3548, -1872, 605, -861, -2132, -1266, 1884, -1374, 716, -2732, 3287, -3662, 2163, 670, -2132, -1831, -358, 1873, -3115, -771, 2065, 3567, -842, 439, 760, 420, -3888, 1376, 2263, 1124, 2462, -442, 2689, -1701, 1325, 815, 2150, 1401, -1600, 3839, -446, -1300, -951, -1899, -2676, 2019, -445, -73, -1468, -3473, -3500, -687, -1028, 220, -234, -2332, 3681, 2413, 2048, -3569, -3782, -3120, -945, -3047, -3153, 2288, -1324, -1031, 2165, 2345, 1796, 969, -2312, -535, 3501, -983, 3488, 1517, -1736, 2764, 2622, 1547, 3532, 3278, 3056, 3053, 2834, 2644, -111, -848, 773, 2885, 3807, 173, -1456, 659, 2148, -322, -856, -1548, -1064, 844, -701, -2730, -2483, 1631, -3307, 433, 1822, -1634, 1655, -3535, -1667, 3668, 3284, -1309, 637, 4014, -3219, 2526, -1954, 1681, 406, -3291, -2646, 1527, 377, -2441, 3024, 2383, -1873, -444, 1758, -285, 1056, -915, -2583, -2135, -1354, 3403, -2000, -553, 2988, 1545, -1568, 4019, -1686, -3742, -4076, 3771, 1085, 1739, -3349, -3745, -326, -3998, -2227, 1330, 4059, -1981, -388, 1748, -2911, 55, -3788, -295, -3836, 3127, 74, -686, 1192, 2379, 1768, 870, -662, 3789, 2826, -2164, 1405, 2607, 3137, 3382, 1228, 1623, 1002, 1058, 212, -177, -3716, -4067, -2730, -2782, 1896, -1906, 2859, 1508, 1246, 3956, 2548, -1242, -625, -692, 1349, -1645, -3154, -300, 1731, 1545, -3026, -1288, -3953, -3997, -3681, 131, -3002, 2863, 485, -2731, -2042, 133, -4031, 3791, 3009, -3584, -1588, -538, 2525, -871, -1326, 3351, 4012}, '{251, -1833, -2228, -1020, 453, 1782, -1383, -2924, 3572, 980, 
//                                684, -2881, 2117, 2447, 2198, 3973, 2132, -2387, -3209, 
//                                1075, 3258, 2954, 3177, -1282, 3555, 2820, -2117, -83, -797, -1538, 3606, 3306, 1240, 125, 3336, -2783, -1514, 3571, 2069, -14, 888, 3109, -4018, 2547, -1574, -1663, -2219, -3180, -2849, 2730, -2959, 1169, 3529, -1593, 3417, -3168, 554, 1568, -211, -2872, -1509, 2640, -3750, 2825, 2494, 3497, -3732, -778, 3237, 2370, -2855, 2697, 3717, -3765, -3273, -1968, 3605, -3543, -1135, 4054, 3136, 2719, -2846, -449, -1429, -1043, -2607, 1060, 3043, 3514, -3924, -3679, -2176, 2767, 3085, -3959, 2423, -1203, 2549, -2463, -1470, 1643, 2641, -4002, 625, -3655, -3501, -3551, 4029, -2565, -2889, -2220, 97, 4082, -1692, -3495, 65, 1134, 424, 1734, -2300, -3108, 1072, 3433, -3973, -3461, 2406, 3003, 4064, 1776, 2024, 3996, -3239, 3746, -268, -2352, -3065, 2045, -231, -1253, 2284, 1541, -765, 1174, -3, 2826, -1751, 2777, -3144, 3263, -2362, 2808, 2699, 2099, -843, 178, -2042, 3894, -3744, -668, 3131, -1227, -2734, -1652, -1844, -3714, -2170, -1314, 2, -3906, 783, 339, -2181, 349, 3568, -2092, 283, 3050, 2987, -1047, -2757, 4090, 1887, -2630, 1236, 2176, -2774, -3639, 662, 1832, -2146, 1075, -819, 1362, 667, 289, -430, -987, -4090, -1894, 3939, -543, 3277, 2024, -1304, -3659, -1422, 2744, -1441, -971, -562, 4072, 1776, 1260, 2170, -3298, -135, -3286, 3209, 2015, -2863, -1650, 2800, 2578, 1572, 3367, -2674, 3794, 2709, 2506, 3930, -2915, 3541, 1121, -69, -1536, 1980, 3925, 1712, 2555, -2138, -2081, -2163, -1816, -716, -1866, 1867, 1251, 2454, 2967, 1616, 1632, -1791, 2029, 3847, -3838}, '{-2033, -3906, 1653, 3180, -3824, -2327, 1227, -1325, -2196, 1929, -1476, 1797, 3525, 279, -1610, 750, -2246, -1089, -2752, 2027, 705, 2034, 3105, -150, -3600, 904, 3636, -1141, 1720, 2012, 720, 168, -4050, 2260, 2906, 683, -313, 3310, 1486, 1092, 2914, 2708, -1646, -2200, -1171, 3264, -862, -131, -2037, -3074, 3052, -3963, 1562, 2805, 2221, -3753, -3926, 1928, 4086, 2847, -3104, 2002, 3841, -4040, 435, 2720, -3862, 2939, -3721, -3827, -1665, 1508, 2236, 663, 2761, -2179, 1039, 3713, -3950, 2100, 10, -3998, -3374, -1470, -2062, 3896, -909, 3458, -2601, 3614, 1175, 4060, -1241, -945, 1818, -3239, -2126, 2148, 2962, 1548, -1703, -247, 1907, -305, -2016, -129, -1746, 2374, -872, -171, 71, 1479, 3225, 3420, 3009, 3478, 3166, -199, -1441, -473, 477, -2129, 2570, 2461, -62, 1357, -2742, 1249, -1482, 842, 2330, 198, 1634, -3185, 3911, 1566, -2395, -2907, 1245, 1042, 3839, 4069, 3057, -3621, 2247, -2217, 1372, -3107, 376, 3727, -3126, 1997, 2236, -3724, -2777, -1484, 440, -3354, -3905, -1079, 1303, 1677, -856, -1408, 3271, 390, -4023, -544, 984, 1521, -107, 3514, -671, 3444, -869, -866, 2798, 2549, 3959, 2575, 1418, -1613, -820, -2607, 993, 
//                                -3999, -3249, -1959, -717, -3971, 56, 3832, 619, 506, -3252, 2758, 2838, -1967, 935, -1135, 3473, -3390, -3706, 
//                                -2376, 3191, 502, 1513, 799, -3227, -2093, 2598, -1916, 
//                                3111, -4008, 3545, -1749, 3466, -1221, 2286, -4060, -1999, -2804, 2674, -667, -3430, -2803, -1624, -1167, -368, 1421, -212, -3173, -2602, -95, -1885, -3373, -2298, 2166, 1887, 1243, 1002, 1997, -1153, -1640, -3720, -1803, -2483, 2260, 2234, -1867, -1476, -2379, 818, -358, 3334, -1841}} ),                        
                        .t0(sk_t0),
                        .sk(sk),
                        .done(final_done)
                    );                
endmodule