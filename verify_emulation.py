import os
import subprocess
import shutil
import sys
from pathlib import Path
import urllib.request
import zipfile
# from Dilithium import *
import vcdvcd
import time

start = time.time()

random_bytes = os.urandom
ctx = os.urandom(128)
rnd = random_bytes(32)


def find_vivado_path():
    search_roots = [r"C:\Xilinx", r"D:\Xilinx", r"E:\Vivado"]
    for root in search_roots:
        for path in Path(root).rglob("vivado.bat"):
            return str(path)
    return None


import os
import subprocess
import shutil
import sys
from pathlib import Path
import urllib.request
import zipfile

def download_repo(destination):
    repo_url = "https://github.com/merledu/Athestia.git"
    branch_name = "verify_new"
    folder_name = "verify_new"

    temp_clone_dir = destination / "Athestia_temp_clone"
    target_folder = destination / folder_name

    # Check if Git is installed
    try:
        subprocess.run(
            ["git", "--version"],
            check=True,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL
        )
    except subprocess.CalledProcessError:
        raise EnvironmentError("Git is not installed or not available in PATH.")

    try:
        subprocess.run(
            ["git", "clone", "--branch", branch_name, "--single-branch", repo_url, str(temp_clone_dir)],
            check=True,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL
        )
    except subprocess.CalledProcessError as e:
        raise RuntimeError(f"Git clone failed: {e}")

    source_folder = temp_clone_dir / folder_name
    if not source_folder.exists():
        raise FileNotFoundError(f"Folder '{folder_name}' not found in the branch '{branch_name}'.")

    if target_folder.exists():
        shutil.rmtree(target_folder)

    shutil.move(str(source_folder), str(target_folder))

    # shutil.rmtree("Athestia_temp_clone")
# === Configuration ===
cwd = Path.cwd()
VIVADO_PATH = find_vivado_path()
    
if not VIVADO_PATH:
    print("[ERROR] Vivado installation not found.")
    sys.exit(1)
# print(f"[INFO] Found Vivado at: {VIVADO_PATH}")

project_dir = cwd / "verify_new"
if not project_dir.exists():
    download_repo(cwd)

all = str(project_dir / "verifyInternal20may.srcs" / "sources_1" / "new")
TB_FILE = str(project_dir / "verifyInternal20may.srcs" / "sim_1" / "new" / "verifyTop_tb.sv")
DESIGN_FILE = str(Path(all) / "verifyTop.sv")
PKG_FILE = str(Path(all) / "Dilithium_pkg.sv")




# print("Exists:", os.path.exists(DESIGN_FILE))

VCD_FILE = "verifyTop_tb_output.vcd"
TCL_SCRIPT = "run_simulation.tcl"
WORK_DIR = os.path.abspath("vivado_sim").replace('\\', '/')
PROJECT_NAME = "verifyinternal_project"

def quote_path(path):
    """Quote paths for TCL compatibility, especially with spaces."""
    path = path.replace("\\", "/")
    return f"{{{path}}}"  # TCL uses {} to wrap paths with spaces
# === Dynamic SV code generation ===
def write_verifytb_sv(pk,sigma,msg,msg_size,ctx,ctx_size):
    tb_code = f"""
    `timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 05/29/2025 03:13:55 PM
// Design Name: 
// Module Name: verifyTop_tb
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


//module verifyTop_tb(


module verifyTop_tb;
    // Define parameters inside the testbench
    parameter int PK_SIZE = 20736;  // 2592 bytes
    parameter int MSG_MAX_SIZE = 27528; // Maximum message size
    parameter int SIG_SIZE = 37016;  // 4627 bytes
    parameter int CTX_SIZE = 1288;
    
    
    logic clk;
     logic done;
    logic rst;
    logic [PK_SIZE-1:0] pk;  
    //logic [MSG_MAX_SIZE-1:0] M;
    logic [{msg_size}-1:0] M;
    logic [SIG_SIZE-1:0] sigma;  
    logic valid;  // Assume 'valid' is an output from the DUT
    logic initial_start;
   // logic [CTX_SIZE-1:0]ctx;
   logic [{ctx_size}-1:0]ctx;
    logic [31:0] ctx_len;

     // Instantiate the Device Under Test (DUT)
    VerifyTop #(
        .PK_SIZE(PK_SIZE),  //  2592  bytes
        .MSG_MAX_SIZE({msg_size}),    // Maximum message size (adjustable)
        .SIG_SIZE(SIG_SIZE),
        .MAX_CTX_LEN({ctx_size})
    ) dut (
        .clk(clk),
        .rst(rst),
        .pk(20736'h{pk}),
        .M(27528'h{msg}),
        .sigma(37016'h{sigma}),
        .valid(valid),
        .start(initial_start),
        .ctx(1288'h{ctx}),
        .ctx_len({ctx_size}/8),
        .done(done)
    );

    // Clock generation (Toggle every 0.5 time units)

    // Testbench sequence
    initial begin
        clk = 1; // Initialize clock 
        rst = 1'b1;
        pk = 0;
        M = 0;
        sigma = 0;
        ctx = 0;
        initial_start = 1'b0;

        #1;  // Wait for some time before finishing the simulation
        rst=1'b0;
        initial_start = 1'b1;
        ctx_len = CTX_SIZE/8;  
    #140;
$finish;
    end
    
    always begin 
    #0.001 clk = ~clk;
    end

    // Dump waveforms for debugging
  //  initial begin
    //    $dumpfile("verifyTop_tb.vcd");
      //  $dumpvars(0, verifyTop_tb);
  //  end
endmodule
"""
    tb_path = TB_FILE
    with open(tb_path, "w") as f:
        f.write(tb_code)
    print(f"Testbench written to: {tb_path}")


def create_tcl_script():
    tb_file_tcl = quote_path(TB_FILE)
    design_file_tcl = quote_path(DESIGN_FILE)
    vcd_file_tcl = quote_path(VCD_FILE)
    work_dir_tcl = quote_path(WORK_DIR)
    pkg_file_tcl = quote_path(PKG_FILE)
    all_tcl= quote_path(all)

    tcl_content = f"""
# Normalize paths
set tb_file [file normalize {tb_file_tcl}]
set design_file [file normalize {design_file_tcl}]
set vcd_file [file normalize {vcd_file_tcl}]
set pkg_file [file normalize {pkg_file_tcl}]
set all [file normalize {all_tcl}]

# Create or open the project
create_project -force {PROJECT_NAME} {work_dir_tcl}

# Add the testbench and design files
add_files $all
add_files $pkg_file
add_files $tb_file
add_files $design_file

# Set the top module
set_property top verifyTop_tb [get_filesets sim_1]

# Launch simulation
launch_simulation

# Add all signals and dump to VCD
add_wave /verifyTop_tb/*
open_vcd $vcd_file
log_vcd /verifyTop_tb/*

# run all
close_vcd

# Close the project
close_project
exit
"""
    with open(TCL_SCRIPT, "w") as f:
        f.write(tcl_content)
    print(f"TCL script written to: {TCL_SCRIPT}")

# def run_vivado_simulation():
#     if not os.path.exists(TB_FILE):
#         print(f"Error: Testbench file not found at {TB_FILE}")
#         return False
#     if not os.path.exists(DESIGN_FILE):
#         print(f"Error: Design file not found at {DESIGN_FILE}")
#         return False
#     if not os.path.exists(VIVADO_PATH):
#         print(f"Error: Vivado not found at {VIVADO_PATH}")
#         return False
#     if not os.path.exists(PKG_FILE):
#         print(f"Error: Vivado not found at {PKG_FILE}")
#         return False

#     os.makedirs(WORK_DIR, exist_ok=True)
#     create_tcl_script()

#     cmd = f'"{VIVADO_PATH}" -mode batch -source "{TCL_SCRIPT}"'
#     print(f"[INFO] Running Vivado simulation: {cmd}")

#     # Use Popen for live feedback
#     process = subprocess.Popen(
#         cmd,
#         shell=True,
#         stdout=subprocess.PIPE,
#         stderr=subprocess.STDOUT,
#         universal_newlines=True
#     )

#     try:
#         for line in process.stdout:
#             print(line, end='')  # Print Vivado output line by line
#         process.wait(timeout=600)  # Wait up to 10 minutes
#     except subprocess.TimeoutExpired:
#         print("[ERROR] Vivado simulation timed out.")
#         process.kill()
#         return False

#     if process.returncode != 0:
#         print("[ERROR] Vivado simulation failed.")
#         return False

#     print("[INFO] Vivado simulation finished.")
   

#     # print(f"Executing: {cmd}")
#     result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
#     print(result.returncode)
#     print("processing...........")

#     if result.returncode != 0:
#         print("Vivado simulation failed:")
#         print(result.stderr)
#         with open("vivado_error.log", "w") as f:
#             f.write(result.stderr)
#         return False

#     print("Vivado simulation completed successfully.")
#     return True
def run_vivado_simulation():
    if not os.path.exists(TB_FILE):
        print(f"Error: Testbench file not found at {TB_FILE}")
        return False
    if not os.path.exists(DESIGN_FILE):
        print(f"Error: Design file not found at {DESIGN_FILE}")
        return False
    if not os.path.exists(VIVADO_PATH):
        print(f"Error: Vivado not found at {VIVADO_PATH}")
        return False
    if not os.path.exists(PKG_FILE):
        print(f"Error: Vivado not found at {PKG_FILE}")
        return False

    os.makedirs(WORK_DIR, exist_ok=True)
    create_tcl_script()

    cmd = f'"{VIVADO_PATH}" -mode batch -source "{TCL_SCRIPT}"'
    print(f"[INFO] Executing Vivado: {cmd}")

    process = subprocess.Popen(
        cmd,
        shell=True,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        universal_newlines=True
    )

    try:
        for line in process.stdout:
            print(line, end='')  # Stream output live
        process.wait(timeout=120)  # Wait up to 5 minutes
    except subprocess.TimeoutExpired:
        print("[ERROR] Vivado simulation timed out.")
        process.kill()
        return False

    if process.returncode != 0:
        print("[ERROR] Vivado simulation failed.")
        return False

    print("[INFO] Vivado simulation completed successfully.")
    return True


def parse_vcd_output():
    if not os.path.exists(VCD_FILE):
        print(f"VCD file not found: {VCD_FILE}")
        return None

    try:
        vcd = vcdvcd.VCDVCD(VCD_FILE, store_tvs=True)
        print("VCD loaded in", time.time() - start, "seconds")

        print("\n--- Available Signals in VCD ---")
        # for sig in vcd.signals:
            
        #     print(sig)

        output_values = {}
        for sig in vcd.signals:
           
            
            # if (sig=="KeyInternal_tb.uut.dut.sk[39167:0]" or sig =="KeyInternal_tb.uut.pk[20735:0]"):
            try:
                value_bin = vcd[sig].tv[-1][1]  # Last recorded value in binary
                if value_bin.startswith('b'):  # Example: b1010
                    value_bin = value_bin[1:]
                elif value_bin in ('x', 'z'):  # Handle undefined/tri-state
                    value_bin = '0'

                value_hex = hex(int(value_bin, 2))
                output_values[sig] = value_hex
            except Exception as e:
                print(f"Could not parse {sig}: {e}")
        # print(sig)

        return output_values
    except Exception as e:
        print(f"Failed to parse VCD file: {e}")
        return None


def verify_emu(pk,sigma,msg,msg_size,ctx,ctx_size):
    write_verifytb_sv(pk,sigma,msg,msg_size,ctx,ctx_size)

    if not run_vivado_simulation():
        print("Simulation failed.")
        return None, None

    outputs = parse_vcd_output()
    if outputs:
        valid= outputs.get("verifyTop_tb.dut.dut.sig_decoder.dut.valid")
        # sk = outputs.get("KeyInternal_tb.uut.dut.sk[39167:0]")
        # pk = outputs.get("KeyInternal_tb.uut.pk[20735:0]")
        # return pk, sk
        # for x in outputs.items():
        #     print(x)
        return int(valid, 16) == 1
        # return valid==1
    else:
        print("No signals parsed from VCD.")
        return None, None
    

if __name__ == "__main__":
     ctx = "2BB57DE5A59B2C811A7A30BFBD178288E2308F383B3C09B5B090185CCD06F46E14602DC93DF8D0FAF21E21623BFD96AD77A6F6D0CBA63FEEABC7341483D0B31386C1AB5CE9B84AEA5F94461D1AA77AB2FA6BE4270F23A36D213E1D75C3BC77226A0EDB7A5239C3BF5B0C71366021D4044D821917EC8C03631D3D3BAB9BD527A21D23B30CCBFF60C1A825CC03B16D0DFF6A182841A25F36DD0A785C14FD172386E5"
     pk = "7295BAA8804BF00CFFDDBBD923A95EC29E940617BCAAA95D7038380EEF2B2E88004D569066D0E5841767BA360B06BFE2EB8050A1736EB67EA0A9350D3C8A803133633A6D98AFA21E5D44FDEFF16DD6FEE278BBB163AA2DC29DE66E0359E92E85B74AC6D3B978F865888DF243355E46B6C464ED155D25689EB30F82BD9D86F6A11D78CE48EB14B18A994B105394E8DFA24188EB5CCB4A7F9CB311117C987617230D5B9F74C811C4505638F252B2CEDDDAA986EACFF83A5B64DF188F662DF30CFB841EC628BD5F1805F595B7055A13C595A8DC21BB974B30EA410F83940D8AB5E4206D9973C8FC6F9D73773A1463DEAE1153E4D0198DFC787BF2CC710A714BC078259F451B41BF6240872ECF8F172AF9F321425C8EE0912C3370EF0520F61FA7C4B7568093DAFEAC769C8D39BBC9E80C3CE0BFFFB246D37FAA71CB770F7E6CF44D2BEAC053C9386A397849445C28A49C4377731F1B0A74C5D186E0C554011A63A7D56B9A82C19A98C7B9B25764503B7DD9A436DE315FB7437BEE19B252DFF76F2414FC27DF0E8D29AD901BC0A4CBA4718678B6418A76C1AE544CD399E9A5F400721739D823B7F7E74ABE07CBC3BB22B5811A84D36D64737C42E42C3049C73E17103A07598B45DDA33CD3316FA763882DA19E7B2AF32C79AD43F5D7CD3157D93F21A97AD63331BB0B6D3E8CB574275230FF6BD6AD16F65785241B40A95F54A906A44EAF01B5295A3979F3696167B1E63B320520B545E7078EA6E3B7AD715CAD2D52D8765A7321B03C04CCB2B0FA77287282040CD8A7FDF1D7AF54461E221D1D504096D8052E6908456B6B3FF94B62FA936FDDBB9354D78F6D097E7E5544E78127F005CD58BD6B6D380040275511C861DD62F0B7B40C4DDABA60B8F91C7414A1BF3E4FC22AA1D8D42BBB9E456B5FC9F147C4D2B85F1288C7667B20E5E42DAD03A86E8334906045243DA18CAE5F987FF582378AE0B4E8C86065721C2F47B7CDDB996326F6918178CD5E2634F246C5B2D76B4D86E55265884983221461B1C759B63E4F18C33C34D65C01EB9723121FC827469EF4C7336D080AD5DE1348CCA2CB5AB6F07C9068D7997002F4F7EDCA42DEEF3B1CA0198D7FF65A33B4221F486D70D8DCFFBF3EE4436C0D7ED111C98615FCE6722C8776945895FC5928209466849C9EC2F95AA280F0518E1AA27DB005D8CE62D628F040AD45184A778FFE96F1BCB48D0149207CE490DCCB845D70FE8CFEC347F01CC25EF823CEFC294DA461D246B998303FBC954CB175429C5B0BDD03A06A1CB623B419F4FA0953BB7CB12BDBFC559B05C8C3805B1759D516DD37A66280280EC17474017A62433684C406A47647C09F25B446A9208E5504849EFD4C1751469C581D63F7A002502E25D222E6E87F0E08F9544DEB574FE7D9AC31278CDFE2BBBC1BB061D5A3763772D9E0A1C5999F8EB26DC71D55CA98143BAF7F9A1304F4E7A779AC12E288A49B63F3A37B1DF0DFC990FC336E64E2D8BB2A88ECC7753DF0524309829F1E9ACE785869C29F6D550381F0F366AA3827EE773F4D13DB8578F5C4ECACB40BC675722E666938876AF5414F99F3775FC2ABEB290129A068CC53BE27973B7FA3CA282CF9E8D237A79394A4058356873913A387C9EC292A2E3BC6FDA7998D8F6824E902C3E04188BEB54C15DAF8BFA7773405FA16B2CEE22DF32FD2D3F377CDA88AF42536FBCBB11871E49944BD665A55023244033B2EDE7C99C5EC2EB9453CFECBF66582E3D15C103E9AF3E0E8F7E9BF9515B84D1A06CC60487B36FD1B657DA6663A14A6521EEB32374C023A51A95BB6C36351D1BA30DD6C657F27D5C605EB2F150206C4B2EA965D59CBFF91CC73802A071E1DE1ABADE5DD050B7B9A1A2F050CEAD7151A7866371183866E78D9B7B8B9FA71145813DEE131DC5D159DCA1ADAEE52E09E69511E055553B0F96B276C14F38E55126DEC8369D21196BBDACD91F3CBA39722CA8AE29F565AB976255D3E45CC814A8F28E3A78FC87C8970B657E1FCF877B405F63B008685282BF772CA1A6ED3F3C3F939D8FEEA9626820DDF40EB0E734C59C3005F4D459BDC927A3D0A88227A7EF7817F4D48C8CC658A8A100DA2E1BF747BC69033EAFD1FC64EEEAFF3C6FD78883834023169E3812FFC98ACB78F214E2F8921858AB3E1922A1EADF8AE3A391C4CFCF178A7E6344550F8EACDE514B9AB454B49F6682A9F5D245AEE6D84CBE1F25ECC0675504CEF78A9FF1DFB2C81C40B8DD0EC44A20DA69E5A0708244BE1412E98D3A76613D817229588E55F078D3BD5F43AF70E7B937321855E52063A60F7E59B12C629309F50A0C63E34804AE611EF88B620034B4DA7C6064B31D44CB3AD996E2BDF08A76726D78E66A6071D8F8D6C5A311ABE0D46006AD110FCB22508CE5397F96E6DB881CC6D2330A0E49B208F8C585B6A40A7FD79E36B64D211E442EB3546A1A2948591DDAE747A6CB784D028B73CBE52147DC8C48C46AD565094218DC9C1848D3E9C9B8C29FC7ADE2E26A46AD17F8A875055CBE6C74D5DD6B43F6E302CF4F4DB758651EA95FED320C63C01ECE0D9C829DF74709E28E1B1EABEE04928D1F3D1B640D1184BD63C07ACEDCC13632DF42348F635114DA12241BC72200C28F9347AFC4183964802DA7F0F31CB3E8B57D989BB151B2836F1433DBE52165B5DC143C0C8511337F5306E8843ED113FE251A9F56A6ADFABCF0A8571AF434998F019DCED678A8D38A1EC94127BBF2971C4CCAE373C0BE9F82A0B9B3677ED290455D732586EFD2B15EEE598BEF9E6E27FD3174852E77BA62105237D8B3A25E2B0446FD6F4049DD8EE4E2F4739E6C9816924401A273A0853A17DABEB9227B07DA3B50422D3B9D6C465456E4BBB3E3EF0FE8A9A1AB24A34F5C45B0D7A5D427C52BB1CD2E8F94707A63F8302825E5F221755FED81C4BDD8397C86D615F9A50105EBBB0E789467148B645D3CE0A7168E12E144C9F77D9DEE322B75C7A1ACF0117D6F8919F8EFC7D2CA94074CBBB4902E6838CF2822E89CE631AB8FCADB4E4669C36A21E2CB78F1C869A5B8EF1B62195D549E3571DF7E315C29166ACEA6E5495827EA87545B75FFEA03DD9116016A4AD73EE37DECA9009AFE6C394A2A0573DA2BD6ED3F872043087618CEF0CD5539F4D42D033C9A28226270F18A519960176406843897CE2734D61BB97A2880DD1293FEF8B55BA2EC330BE01199FA8A3A3AAC4E306BDDD3ECE9A1D7F6DF6407CF6487A43DF8AAAACE865BC2CBB7EBAA2452F0960D4F1F26D6661EBE4CFA3D201B489E23AD6402C4D55BB3A05D38F58F4B9A75759C5EB7843A5D0D71BEAC12FC3C1F17D5B86F12DA9F165683ACE424DAB2B08E9D8348D58323BD100C96EE6E23BD5C6DB18779EE5CA29643ABF9F883FDDBDFBB5A4A6BB1F34165A9D1CBCA90A8AD86C097D25C749E89F78F7B1267FB1AAB6E49BEF0A5847992D16A5B944E7727A4E8B541D08E155094058DB8A8088D5C3356CE0F0B5EAFBAA86A59CC78FD0CE47EBDE8B9D3DD8C6D6707FD5F4E5E932977E629664AF1A77A7895630E9713001192AEEA4FB151A2A9B3F839D962930A13954D297774E713C98E26DA8AD69DB4B2897A062EA562B5ACE2F951B1D3FF65979D74FB163A4253BF999CED4C2356A59D092E3FD41C4BC1B4A61F1E4264B66323F20BA1EC6CAB2C2"
     M = "3212C7A4AA97BD3CC07188C2480FFED5DADBC7BE0C32DD2AB10A441A7C6C25EF8D60972EA60C0447AACAA56C5A526481EBD5CC257E0D4BFF349DF3A053A2BF544B9834E877D02FCED78013418D71CF5EA5C32EA79F00707F1498F9081964F3070A5120C11E7C091BA5FE4DFEFA0971C3CD94FA907418B44B28B4D3DFD626B4728C0B373C500E4029B91201A1B271850B26353B85696393F19CD49969A92A457F49DB71EED23573BF53D1D761171399B62FC7B8A0EB2F09297845A07B74D77F8FCD8257D7FF9638F0C27B31988C32DA893BE339E171A4941AD148768D95F74B7C51479394BBC2B6988FC7DD6FFD709D456A1740919D9D1D28EE3C05B720AB5BCB30B546449E45CD792DA052A9C7241C61AB30227EB6B9DEB3296AA67EBCFE78E36C113F482A58A72449C764FC4B7461CA20A40CEF88DD1576D6921A339F4EBC2E286E3DB5E4D4365289FE34EF55E168B509DC5E18F2895B8EFCC871983E7385FB0A36D4DC36ABE54B6DBA6589A82621F4296529C2EFA33B9E13AEB91B639E13167939E41F0D8B7E5EF712AB3824D1E6D6A77C6ED949C20B67FA36C988F1C9E8CFA64F106F4102E79EE6CBCADCF8037A41C8E374E6303ACCB62D7C25D7C2F66C2D2ADB92D4C17694A594D0F27DF82E6FF6BB87BF0E55029E6B825941C5DC10DBEF5E9DB21C71A580514ECE5160474EBEFF0D2E1B3B365ED8273D26526735CFC884F4021F5A7B528516076EBF86B03E23339B42B7AEF4A0B900C48ADF4B53181C7F06CD6B452F6383BAA90533C89F5177FE021ECCF2171A8F54491E95F0733AC2EF513F80E3D3DE0337BEFD04EF6CF0617313E048344B2967EB3D17FB11CD92466F4244775FD1932B241A94341A15A0E759BD22DD93F28DA327D894A6BCE3F2692BB695AC287902A280B52319B7F54DD69D2FA153ABB5B37DB5A14F873CED6F41282A08647FF3BFE0BB805CDDCE73EC328ABD088C419EBE750218F787297A659245E2F18CECE856A96FC1982A59D5AF41B41DFC7FE4E2FF896C936167FC38B6401BCA98EB825F46A2675F1D7F06931C2D69B6D20C7EE6AE63E267205987EEAD370B570F8E3DC3BE55D75A1785C58083D87634FE4665A9C2351C35091B3FEC1A78B1E574AE848DEFA6F77D3524CE289D62E347E253EF67D16195DA7208B9A315EA3F9FD3E00BD554E844584EE8749D67F397A637F80AC7884A131318A91BE7EC53674BE42E55BD570EF2F90E9618E9ECF8737F70126C1DDF781688CCF8BDAACD5C6CFA8028B8389DDA4F280510B8F1322A261F369B77D9E74A6B6C17CDF05E51482BB22A1D68C33F3AE295C34317CEBF2555A2D19D7432E4931335BD4C20D0E9F0D7BDE505C715C162E0FBB9E116A4339CADF2774E8DB3D3F9CD97093306F31A11ACD26B5AE9B95D40E16FBC7878027C6F02209F2E599B6324E9EB37300B8E5BEDE1A7354338D8B3F394366D1DF75B80CB1A9A30E654EBB8116E4770FD812D355313CF96D0CD3936296CAB99222E452D8D6B6C15705D7599F5EF24D4F167B5716601190A27C4AFFDE1630679A85296E3291AE3921518C4F59E36A0E1A96445C1B73A3221143B05C8BB6F340C57FBF0A35941ABD684235C4E3C246CF124CD547C1E44C26D2075CEEE151AD6A5E3B79EA245FD8867B96F3D93DEE3E4EFCE13A4ED1AB8EE12398283E472BDC16A4CB66B8586CAAC2645ECC3AF072E8F3C90DF1F0175E98B2BC98B68C27AA4F5FBADD34727785F6804677EA82DF43F0A0AF34653939EC0F4632A3FBCFA61E9ABA0F7C70134E767C331761A99F7415D3689815DCF3351625DEDDFE3FD38A26EA37DD207362C3DD5228B82211C8327FC21CD083279031A784F956A1455036A8A8E08771B253927094BAB3A44B02F45D9C6E2C22F3070F49F6359B8A0C229801F20F792140C0BD6E8A5FEE6CDC8D6C71F4F904E72413B5A1E13D8B7CB818647222A1B23B89C31CDBA0CD989318927D68C92985032DB0DDDE59D740033540A661EB7C4A2ADB20E821EC2936668B12994EC012A39E93614461D3E3E1B28309A6602726A79C58429DA8415327047A7753473E0143229D17DE8A37D856E74F25AEE282D63F546B0CE68D850B4D304A4FF75C80AA8471B683D30F582D647FEBA6592BA4348194380EDC311AC59D81DA9E4FF7E10A66A4913D2C0F033FFC4DA87691DEA2219C05BE531481CE5366F0E64134B9DD6C8EE14FB48A7708829108029E88A423CEDFA9024A399DE5E4D64DD63B18C1FB32603BE7B09EFD9714FD3BC21C7F3FCAB2CD17718BB79332F0FB6AEE4CA0DD69CF0CC02E5CBC732FE211ED4D0DCBD965A673137E01507F8ADCF8F6B5340F5A742FC1F30FAF017E0649F78F69CA46352521F547C98D5F687E9D454153C5BDFBD2C7792D3BD8C9C6A5050D2409C105C096C3C1933EC780E6C069747269B01A409BFBBCA25128F95C583EA2C4703B5EBD8784BA90042ABD0B46825CD254475CE4FACC980E04536F7DCA653B0024BC66950AC6FAE4F58A3C714EB16BDEDC270810D1BDD9B39340A924154CC5AEEFBCD68A1BB7C79D5C77EF709026CF52F79091A35D2A2E76E2B2F1BA1DC6CFB8B49D8181DAD1B3146F7AB469CE59237C81563C84AB1241C59E5F9758B60D7F85B836BBF2954D7815DD8D43D265C4B8899F8538B79A4B0DA25BCBF37B4A6A5E51FB3EA187AD20D743DE16A72DDE6F5FC9A70DC930C4B7FB6D3909A6D949FCDB732EE1D7371320DC7EADF4E98393EFC3EC6C29D43CA12D9D4333345E938A0DF9D13B33FEFC8828B686214A82DFDE77D94945BA6D2028AEC1F15493F3DED248E4900B08485FE0D75443735E0B56AACD64CB6B055DCFA0D9B89C620DA7F424D7B3E865E2C4D62F89687E6629ACDA937B56973F3873CCEB24FF215FBBEDE33F601E9BAA22E0B7F89EABE1ACEF69872CDE08F6A700C4FC63E6FD40F3A376739B754F060B1130708AAEAE908C82200BBB680481B2F73C2EAB1227B325AFB4451828562790637C1B9D886C0862246FE1C6F1859BAEF4B09449205AE8E98D5AEAEA5988643BF86B57EBE8E42A9B33BC76A245EC242A28A61367B1DE70089322103D811E189C0BA5CE862DAFB61096091563D446A39126B0C1A364FC8A19FB5F58C6C3FD1A1593DAA6901DADFC78F002D1B8C91C245C7E7F06C05C75371F2BB49ADE56FF4CA8EEFFCFF9A0037388B448B3521AD140DF3B0C4844E659B92EA3877469032E2200C638C9C94C2ABC7B0B7E0C13B1D5045A63BB934AA6F7B295469156188F0A858626A29BE2078793005FDD49684DA56CCE832A05478AD759CE862482AAC493EBF0F875FD1F492242DC1892FAD9BE4A57A134979564F53E0B4F58CD5BE2F4F83BCBE1487FC7B85D8550D7293EF7EC80104BDCE1763CFE770BCA7AADB67BC66FE720573EE865CA8FE8D702348DCC0F0352C8BD10061371FECD6A4CA55D0A97099A77420EA0BD97BA715CF89F2AC9F93FCB674AFDCEA659C3BE58717E292522DE3008AA1689F062A530F2AEB91AD2C3F3711CD9E5CFA93AE41D8E50484C19914C2A1A6F222FD2B5CB0495BCCC07A0A8DB847DFD0C4B4D1E96CDB5F8FBA02A691761528F0073A1D39E570ED129EC6EEC6CD584B3DE2C84F0DCFBD85469E9BA2AEA3CA56AA521A857E29A5EA53C6BF4AA6ED98C262B669AFAEC51A204AB4D69B4ACE3F6ED4704374B2D2CD133CDDFC471072DF5905D83FF8391AA8E437FA3BC9520AA08587507535A9241090E85573D0C9D310D7D57D96728E4735BAC85E3DB79704C1313D77C0BFFDA9AFE1C7AF0FE3A7D71B63EA63F4D5742EF6401BBB6D4BE759F9E3944193521350D92BCDB4AADF375112F142D9CC3310ECBD0F807FA3423C64FA6EB62C4F6544C9509989C807BF831608C9A87C080D8CC5D3A88384D193AD97EE69BA3B280B02ADAD798833A947E4FE8B6977D99AC05BECE2F058A7E2BFF7BCECF2DA9E0448EEFDC7FBCF8E85591C8BC384F8671CD3FD2D0DCE5938B25ACAED82CB46B76D46FA437B79129EF1CD6789D3CCE45DC790A019F4AC9035EFB54B6C30E20CB912651E7C8AB5EBA3C05E3C3F67CF64E5766C25F22B2DC2C0B6C453C62DA56E0FC1AD776EAE68D311A4FD58957050CE1F5165F5C3BC198EE4A25EC6C66125751AF02C7EB958F5370E99144D2DD52C5065F53475C7B0AA53A71F93CB4FA10CB07F873DA543D114C75B2EE729A8CC600E760E60D02DB0AD6A45D9D79AC52AE76C8C63CEA698860C93E06D1A99C981ABDBBF845541413C83CFDAD26069FA7A0130467A9C44FDBA76EF01CDEFBF9514A1C42EFCDB40D4A62B50E0FFCBC526A298666BE9524EE466DD050E6540734CC339C5309C3BFD9EC05BA04E4B63FDEEB0C95E348854ACC152DFC71ED6326E65B8041DC6069489679AC7AA8DB1009803DF175D9CE13EC36F8D04DEBC73DEC88EED3A95474637E81B3FF799C1A91E105147C43FBFD5D2847940AD3901B6CCF3BCFE1CA0766A50BCA82F415DEAA502C66EF48C75AF9F09B81AB61C0699FEE6657203DDC28D7E99E6F607968F937499D43EE7CA0D2957431CF56385BF4E4923AA48DBEAE7C74039F05AA57FA8097924A51C48C8B133D83B1BBFC1CD29F8D998ACE3EC47B88AB20CFEAEDAB384D89B127B3EDFA20681727770A0CF2706730FF7800CD2C51D326C1B6A3BCA035825B74223AE51EA1836922B7174D618BA8A068B9EE2327705D6F548D2C438CAB76E1E4BE88C04572124DF4A7AA753A85C5460DF353E6576F33F3D4DB8091854FEC77303568B2F2E86AE697903E7FC5E824DEC7D6358947809A857A84FB69E180C8A4CB3335051D025325987D5EB720B43DECA6B1C9BF1A532FBF9AE3386DECF0F516D789B492B32FB1B5831FF0DA31D354C6570"
     sigma = ""
     ctx_size=1288
     msg_len=27528
     print(verify_emu(pk,sigma,M,msg_len,ctx,ctx_size))
#     # zeta_value = "24caa1b44d22446b945452a70af1d8b83f6adbd0030f12d11c684681596d4ca5"
#     zeta_value = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd"
#     print(key_emu(zeta_value))
