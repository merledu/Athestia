`timescale 1ns / 1ps


module topp(    
    input logic clk,
    input logic rst,
    output logic led
   );
   
   logic [1633:0] datain;
   logic [4095:0] digest;
   logic [4095:0] check;
   assign datain = 1634'b
   assign check = 4096'hac190f0b47b75308ef0288353755e7e05899c39f434caf93a3ef27bcf75e3dc8932690690dc82107acdbbd7759f52e6620c1194a5ad76fc67ce648d9d1674e3ddbe3a579e4313c870e01a8f51c808184a8c61dabbb4894f38f1a7dbd95b4d37d59ef78762e72acadc27aea6094520d8d54dcd9fcccaf75d0b00ea43018e745de7734136a26e3c9047a47b83ca3d33a08c7ea1752a403ca4b8f814040881bf38b4e47682e6d2cb0eddb5a7fbd89265197440d2cc111745a401c49747e32875c91d1ecd86d8224d60e96a570a5be6d0b9a50ddbe070a5292298b7c3fa50bef09f3e0a624ae8777ab4de37124a91ca949fa077fd289445cc3060e9cd2009fcc75f02c193be06c8cff8e02ce4f2b4bbf36ba3387483dc35baba0349feff3145faad75ae6b02dfe364fba604f6aec572b0aba6447688b1f53d0f21dc7e56e2d49723689b7f0017b91f84effe78bbcd1e5fbeb8d323cdf3980e9463a8e04348e1a737a46ce6d2f03ed649214841b42a3540f1676df18a0ac78fb21750d113795d52895e611b5d83b0e3af3f498bbb437492ba44b82aa294d4d1afeec90006a333165d36330d702584e0afc901f04cf5ca4366a3f39e858d37d4d4d2359d09fd62e434fd82992619a027504737f62962a088f9b7be5edc5506ea4e4d866690fb97d7fa32fe30c3394241f99ec6f9f63aa38f45d65feca5598f5525d26c30f9b0725838a;

//   assign datain = 120'h726E676A6A656A6A726A676A657268 ;
//   assign check = 256'hdfde6395b8647257f66c3ccffd567170e6c6b76811cb0293679d459d3d5e976e ;

   
   sponge #(
    .msg_len(1634),
    .d_len(4096),
    .capacity(512),
    .r(1600 - 512)
) shake(
       .clk(clk),
       .reset(rst),
       .start(1'b1),
       .message(datain),
       .z(digest)
   );
   
   always_ff @(posedge clk)begin
     if (digest == check) begin
            led <= 1'b1;  // Assign 1 to 'led'
        end
        else begin
            led <= 1'b0;  // Assign 0 to 'led'
        end
   end
//   assign led = digest[0:5];
endmodule
