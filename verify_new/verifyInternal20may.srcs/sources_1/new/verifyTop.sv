`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 05/29/2025 03:00:12 PM
// Design Name: 
// Module Name: verifyTop
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module VerifyTop #(
    parameter int PK_SIZE = 20736,  // 2592 bytes
    parameter int MSG_MAX_SIZE = 25624, // Maximum message size
    parameter int SIG_SIZE = 37016,  // 4627 bytes
    parameter MAX_CTX_LEN  = 2032
)(
    input logic clk,
    input logic rst,
    input  logic [PK_SIZE-1:0] pk,
    input  logic [MSG_MAX_SIZE-1:0] M ,
//    input  int               M_len,
    input  logic [SIG_SIZE-1:0] sigma,
    input  logic [MAX_CTX_LEN-1:0] ctx  ,
    input logic  start, 
    input  int               ctx_len,

    output logic         valid,
    
    output logic done
);



    localparam d_len = 512;
    localparam msg_len_pk = 20740;
    localparam capacity = 512;
    localparam r = 1600 - capacity;
    localparam mu_d_len = 512;
    localparam mu_msg_len = d_len+MSG_MAX_SIZE  ; //f =4
    localparam mu_capacity = 512;
    localparam mu_r = 1600 - mu_capacity;
    localparam msg_len_c_tilde = 8708;

    localparam MAX_MPRIME_LEN = 8 + 8 + MAX_CTX_LEN + MSG_MAX_SIZE;//8+8+MAX_CTX_LEN + MSG_MAX_SIZE

    logic [MAX_MPRIME_LEN-1:0] M_prime ;
    int M_prime_len;
    

    // Temporary variables
    logic internal_done; 
    logic ctx_len = ($bits(ctx) / 8);
    

    // Instantiate Verify_internal
    logic internal_verified;
    
    verifyInternalModule #(
            .PK_SIZE(PK_SIZE),  //  2592  bytes
            .MSG_MAX_SIZE(MAX_MPRIME_LEN),    // Maximum message size (adjustable)
            .SIG_SIZE(SIG_SIZE) ,
            
            
            .d_len(512),
            .msg_len_pk(msg_len_pk),
            .capacity(capacity),
            .r (1600 - capacity),
            .mu_d_len (mu_d_len),
            .mu_msg_len(d_len+MAX_MPRIME_LEN+4),//for shake =f
            .mu_capacity(capacity),
            .mu_r (mu_r),
            .msg_len_c_tilde(msg_len_c_tilde)
            
            
            
        ) dut (
            .clk(clk),
            .rst(rst),
            .pk(pk),
            .M(M_prime),
            .sigma(sigma),
            .valid(internal_verify_valid),
            .initial_start(start),
             .done(internal_done)
        );
    

    // Assign output
    always_comb begin
    M_prime =
     {M,ctx,8'($bits(ctx) / 8),8'd0};
//     27672'h
                   
    //{8'd0,($bits(ctx) / 8),ctx,M};//  // {0 , ($bits(ctx) / 8), ctx , M};
      $display("Hex value M_prime = %h", M_prime);
      if (rst) begin
        done = 0;
        end else begin
        if (ctx_len > 255) begin
            valid = 0;
                    done = 1;
        end else begin
            valid = internal_verify_valid;
            done = internal_done;
        end
        end
    end

endmodule
